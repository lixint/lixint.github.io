<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LixT&#39;s Blog</title>
  
  <subtitle>不务正业的日子</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.lixint.me/"/>
  <updated>2018-12-06T07:13:32.276Z</updated>
  <id>https://www.lixint.me/</id>
  
  <author>
    <name>LixT</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo博客新建文章并发布</title>
    <link href="https://www.lixint.me/article.html"/>
    <id>https://www.lixint.me/article.html</id>
    <published>2018-12-06T04:16:12.000Z</published>
    <updated>2018-12-06T07:13:32.276Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h3><p>根目录命令行输入<code>hexo new &lt;模板&gt; &lt;文章名&gt;</code>新建文章</p><p>其中<code>&lt;模板&gt;</code>在<code>scaffolds</code>中，默认情况下有三个模板<code>post</code>、<code>draft</code>、<code>page</code></p><table><thead><tr><th>参数</th><th>功能</th><th>路径</th></tr></thead><tbody><tr><td>post</td><td>新建文章</td><td>/source/_posts/</td></tr><tr><td>draft</td><td>新建草稿</td><td>/source/_drafts/</td></tr><tr><td>page</td><td>新建页面（标签页，分类页等）</td><td>/source/</td></tr></tbody></table><p>通常情况下使用<code>hexo new post &lt;title&gt;</code>即可，注意这里的<code>title</code>不是文章名，具体文章中显示的文章标题可以在文章文件中修改，例如：我这里新建一篇文章，title为article</p><p>命令行输入<code>hexo new post article</code></p><p>此时在<code>source/_posts/</code>文件夹中多了一个<code>article.md</code>文件。打开可以看到如下内容：</p><p><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/article/1544072787521.png" alt="1544072787521"></p><p>文章内容中两条<code>---</code>之间的内容为文章的配置内容，可以在其中设置标签、分类等。其中的<code>title</code>为文章发布后文章页面显示的标题，例如我们修改一下tittle为：Hexo博客文章发布</p><p>而<code>.md</code>文件的名字，也就是我们新建文章时输入的名字，是作为文章页面链接中显示的名字，例如，本篇文章的文件名为：<code>article.md</code>，文章内设置的文章标题为<code>Hexo博客新建文章并发布</code>，那么本篇文章的链接就是<code>https://www.lixint.me/article.html</code></p><h4 id="文章模板"><a href="#文章模板" class="headerlink" title="文章模板"></a>文章模板</h4><p>在新建文章中使用的<code>post</code>参数，就是模板的名称，在使用<code>hexo new post &lt;文件名&gt;</code>命令进行新建文章时，系统会自动在<code>scaffolds</code>文件夹中搜寻名为<code>post</code>的文件，根据其中的内容生成新的<code>.md</code>文章文件。后续随着配置项的增多，可以自行设置不同类型的模板。例如本篇文章的模板如下：</p><p><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/article/1544073389878.png" alt="1544073389878"></p><p>其中的<code>title</code>跟<code>data</code>会在生成文件时自动填写。利用此模板生成的文章文件，只需要进行对应项目的填写即可。例如本篇文章的配置信息如下：</p><p><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/article/1544073504510.png" alt="1544073504510"></p><h4 id="给文章添加分类和模板"><a href="#给文章添加分类和模板" class="headerlink" title="给文章添加分类和模板"></a>给文章添加分类和模板</h4><p>通过对文件头部配置信息中<code>tags</code> 与<code>categories</code>项的修改可以设置文章的标签及分类。</p><p>其中标签可以按格式贴现设置多个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: Hexo博客新建文章并发布</span><br><span class="line">date: 2018-12-06 12:16:12</span><br><span class="line">tags:</span><br><span class="line"> - Hexo</span><br><span class="line"> - Markdown</span><br><span class="line">categories: 搭建博客</span><br></pre></td></tr></table></figure><h4 id="在博文中添加图片"><a href="#在博文中添加图片" class="headerlink" title="在博文中添加图片"></a>在博文中添加图片</h4><p>目前有三种方法像博文中添加图片：</p><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>命令行输入<code>npm install hexo-asset-image --save</code>安装插件</p><p>在<code>根目录/source</code>目录下新建一个<code>img</code>文件夹，将需要插入的图片放到里面</p><p>在文章中引用图片时图片使用格式<code>![header](img/xxx.jpg)</code>进行引用图片。</p><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>在<a style="color:#9900ff"><strong>博客配置文件</strong></a>中搜索<code>post_asset_folder</code>项，设置为<code>true</code></p><p><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/article/1544077136676.png" alt="1544077136676"></p><p>这样在创建文章时会自动在文章<code>.md</code>所在目录<code>/source/_posts</code>文件夹内生成一个与文章同名的文件夹。例如新建文章<code>hexo new post example</code>则会生成一个<code>example.md</code>文件与一个名为<code>example</code>的文件夹。</p><p>把example这个博文需要展示的图片放在example文件夹目录下；</p><p>文章内使用<code>[% asset_img slug [title] %]</code>（将方括号][替换为花括号}{）的格式进行插入图片，例如我要插入一个名为<code>1.jpg</code>的图片，写文章时就应该填写</p><pre><code>`[% asset_img 1.jpg 图片1 %]`</code></pre><h5 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h5><p>前两种方法尽管在上传时很方便，但是在插入图片时并不是很方便，现在很多Markdown编辑器在插入图片是非常方便，截图直接粘贴、现有的图片文件直接拖入都可以实现插入图片，而不是使用代码进行插入。</p><p>但是这样插入的图片在上传时并不会被上传，这样就导致了博客中文章图片的连接还是本地路径的格式。</p><p>于是博主自己写了一个Python脚本，在文章完成后上传前，通过脚本自动将文章中的图片上传至腾讯云对象存储（腾讯云每个月都有一定的免费额度）或者SMMS图床，文章中图片链接替换。这样既不会占用Github Pages空间，又能方便地插入图片。<br>对于脚本的使用，可以到==&gt;<a href="https://www.lixint.me/markdownpic.html">Hexo博文图片自动上传腾讯云、SMMS图床并替换博文内图片链接</a>&lt;==查看</p>]]></content>
    
    <summary type="html">
    
      从零开始搭建博客之四，新建文章并发布
    
    </summary>
    
      <category term="博客搭建" scheme="https://www.lixint.me/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Hexo" scheme="https://www.lixint.me/tags/Hexo/"/>
    
      <category term="Markdown" scheme="https://www.lixint.me/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Python自带模块命令记录</title>
    <link href="https://www.lixint.me/pythoncommand.html"/>
    <id>https://www.lixint.me/pythoncommand.html</id>
    <published>2018-12-06T01:28:47.000Z</published>
    <updated>2018-12-06T02:07:26.985Z</updated>
    
    <content type="html"><![CDATA[<h4 id="获取文件名-后缀名"><a href="#获取文件名-后缀名" class="headerlink" title="获取文件名/后缀名"></a>获取文件名/后缀名</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">file = <span class="string">"Hello.py"</span></span><br><span class="line"><span class="comment"># 获取前缀（文件名称）</span></span><br><span class="line"><span class="keyword">assert</span> os.path.splitext(file)[<span class="number">0</span>] == <span class="string">"Hello"</span></span><br><span class="line"><span class="comment"># 获取后缀（文件类型）</span></span><br><span class="line"><span class="keyword">assert</span> os.path.splitext(file)[<span class="number">-1</span>] == <span class="string">".py"</span></span><br><span class="line"><span class="keyword">assert</span> os.path.splitext(file)[<span class="number">-1</span>][<span class="number">1</span>:] == <span class="string">"py"</span></span><br></pre></td></tr></table></figure><h4 id="判断文件-目录是否存在"><a href="#判断文件-目录是否存在" class="headerlink" title="判断文件/目录是否存在"></a>判断文件/目录是否存在</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.path.exists(<span class="string">"1.txt"</span>)</span><br><span class="line"><span class="comment">#True</span></span><br><span class="line">os.path.exists(<span class="string">"dirpath"</span>)</span><br><span class="line"><span class="comment">#True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      初学Python，一些自带库函数都没怎么用过，对平时写无用脚本用到的函数进行记录。
    
    </summary>
    
      <category term="Python学习" scheme="https://www.lixint.me/categories/Python%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="https://www.lixint.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Text3及配置Python使用环境</title>
    <link href="https://www.lixint.me/sublimetext.html"/>
    <id>https://www.lixint.me/sublimetext.html</id>
    <published>2018-12-05T13:30:10.000Z</published>
    <updated>2018-12-06T02:08:18.569Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装Package-Control"><a href="#安装Package-Control" class="headerlink" title="安装Package Control"></a>安装Package Control</h3><p>使用Ctrl+`（tab键上面）(或View &gt; Show Console menu) 打开Sublime Text控制台，将下面的Python代码粘贴到控制台里:  <a href="https://packagecontrol.io/installation#st3" target="_blank" rel="noopener">代码出处</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request,os,hashlib; h = <span class="string">'6f4c264a24d933ce70df5dedcf1dcaee'</span> + <span class="string">'ebe013ee18cced0ef93d5f746d80ef60'</span>; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( <span class="string">'http://packagecontrol.io/'</span> + pf.replace(<span class="string">' '</span>, <span class="string">'%20'</span>)).read(); dh = hashlib.sha256(by).hexdigest(); print(<span class="string">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class="keyword">if</span> dh != h <span class="keyword">else</span> open(os.path.join( ipp, pf), <span class="string">'wb'</span> ).write(by)</span><br></pre></td></tr></table></figure><p>如果在<code>Perferences-&gt;package settings</code>中看到<code>package control</code>这一项，则表明安装成功。</p><h3 id="用Package-Control查看已安装的插件"><a href="#用Package-Control查看已安装的插件" class="headerlink" title="用Package Control查看已安装的插件"></a><strong>用Package Control查看已安装的插件</strong></h3><p>1.按下Ctrl+Shift+P调出命令面板。<br>2.输入install 调出 Install Package 选项并回车。等待。<br>在列表中选中要安装的插件，或者输入插件名(比如要安装IMESupport插件，则输入IMESupport，它会实时过滤筛选结果)，根据命令面板中的过滤结果，选择要安装的插件。<br>安装中文插件。搜索localiza，在搜索出来的列表中选择点击安装<br>如果安装失败的话可以到<a href="https://github.com/rexdf/ChineseLocalization" rel="noopener" target="_blank">汉化项目页面</a>下载源码，重命名文件夹为<code>ChineseLocalization</code>，放到<code>C:\Users\用户名\AppData\Roaming\Sublime Text 3\Packages</code>中。</p><h3 id="禁用-Sublime-Text-3-检测新版本"><a href="#禁用-Sublime-Text-3-检测新版本" class="headerlink" title="禁用 Sublime Text 3 检测新版本"></a>禁用 Sublime Text 3 检测新版本</h3><p>设置 Preferences -&gt; Settings-User<br>添加 <code>&quot;update_check&quot;: false</code></p><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p>推荐 <code>Boxy</code>   Ctrl(Mac下Cmd)+Shift+P</p><ol><li><code>install package</code> -&gt; <code>Boxy Theme</code></li><li><code>install package</code> -&gt; <code>A File Icon</code></li></ol><h3 id="其他插件"><a href="#其他插件" class="headerlink" title="其他插件"></a>其他插件</h3><p>####　SublimeTmpl 新建文件模板<br><code>Package settings - sublime tmpl - settings User</code>设置，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">            &quot;disable_keymap_actions&quot;: false, // &quot;all&quot;; &quot;html,css&quot;  </span><br><span class="line">            &quot;date_format&quot; : &quot;%Y-%m-%d %H:%M:%S&quot;,  </span><br><span class="line">            &quot;attr&quot;: &#123;  </span><br><span class="line">                &quot;author&quot;: &quot;lixint&quot;,  </span><br><span class="line">                &quot;email&quot;: &quot;lixint8@gmail.com&quot;,  </span><br><span class="line">                &quot;link&quot;: &quot;https://github.com/lixint/&quot;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p><code>Package settings - sublime tmpl - key bindings-user</code>设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[   </span><br><span class="line">    &#123;  </span><br><span class="line">        &quot;caption&quot;: &quot;Tmpl: Create python&quot;, &quot;command&quot;: &quot;sublime_tmpl&quot;,  </span><br><span class="line">        &quot;keys&quot;: [&quot;ctrl+alt+p&quot;], &quot;args&quot;: &#123;&quot;type&quot;: &quot;python&quot;&#125;  </span><br><span class="line">    &#125;,  </span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这样用快捷键<code>ctrl+alt+p</code>可以快捷新建py文件并自动填写文件头</p><h4 id="侧边栏字体大小修改插件PackageResourceViewer"><a href="#侧边栏字体大小修改插件PackageResourceViewer" class="headerlink" title="侧边栏字体大小修改插件PackageResourceViewer"></a>侧边栏字体大小修改插件<strong>PackageResourceViewer</strong></h4><p>修改方法：<br>插件安装完后<code>Ctrl+alt+P</code>打开搜索栏，搜索PackageResourceViewer名称，选择open resource<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/sublimetext/1544008082057.png" alt="1544008082057"><br>在跳出的搜索框搜索主题名<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/sublimetext/1544007925716.png" alt="1544007925716"><br>然后再搜索主题名下的主题文件的名称<br>打开，出现主题配置文件，搜索修改需要的参数即可。</p><h4 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装Anaconda</h4><p>1.相关配置均需在”Preferences”-“Package settings”-“Anaconda”中选择<br>1.1“Settings-Default”中，手动设置python解释器的路径，然后保存。<br>设置python_interpreter为python解释器路径<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/sublimetext/1544009509138.png" alt="1544009509138"><br>Settings-User 设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;python_interpreter&quot;:&quot;E:/Program/Anaconda3/python.exe&quot;,</span><br><span class="line">&quot;suppress_word_completions&quot;: true,</span><br><span class="line">&quot;suppress_explicit_completions&quot;: true,</span><br><span class="line">&quot;complete_parameters&quot;: true,</span><br><span class="line">&quot;swallow_startup_errors&quot;: true,</span><br><span class="line">&quot;anaconda_linting&quot;:false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>工具-编译系统选择anaconda<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/sublimetext/1544010202338.png" alt="1544010202338"></p><h4 id="安装sublimeREPL实现sublime内交互式命令行（使用anaconda环境）"><a href="#安装sublimeREPL实现sublime内交互式命令行（使用anaconda环境）" class="headerlink" title="安装sublimeREPL实现sublime内交互式命令行（使用anaconda环境）"></a>安装sublimeREPL实现sublime内交互式命令行（使用anaconda环境）</h4><p>正常安装步骤，安装完成后，<code>首选项-浏览插件目录\SublimeREPL\config</code><br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/sublimetext/1544011647671.png" alt="1544011647671"><br>新建文件夹，<code>Python37</code>(根据anaconda的python环境版本确定)，将Python文件夹中的文件全部复制到<code>Python37</code>文件夹。<br>打开<code>Main.sublime-menu</code>文件，替换所有的Python为Python37（改个名字）除了各部分的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"syntax"</span>: <span class="string">"Packages/Python/Python.tmLanguage"</span>,</span><br></pre></td></tr></table></figure></p><p>中的Python不替换。<br>打开Main.sublime-menu文件，将所有“cmd”：后的路径改为anaconda的python环境路径(注意路径中的斜杠)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"cmd"</span>: [<span class="string">"D:/anaconda/envs/py3k/python.exe"</span>, <span class="string">"-i"</span>, <span class="string">"-u"</span>],</span><br></pre></td></tr></table></figure></p><p>打开Default.sublime-commands文件，替换所有Python为Python37<br>快捷键添加如下代码，同理可以添加ipython运行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//anaconda环境下运行sublimeREPL_pdb</span><br><span class="line">&#123;&quot;keys&quot;:[&quot;f6&quot;],</span><br><span class="line">  &quot;caption&quot;: &quot;SublimeREPL: Python37 - PDB current file&quot;,</span><br><span class="line">  &quot;command&quot;: &quot;run_existing_window_command&quot;, &quot;args&quot;:</span><br><span class="line">  &#123;&quot;id&quot;: &quot;repl_Python37_pdb&quot;,</span><br><span class="line">  &quot;file&quot;: &quot;config/Python37/Main.sublime-menu&quot;&#125;</span><br><span class="line">&#125;,</span><br><span class="line">//anaconda环境下运行sublimeREPL_run</span><br><span class="line">&#123;&quot;keys&quot;:[&quot;f5&quot;],</span><br><span class="line">  &quot;caption&quot;: &quot;SublimeREPL: Python37 - RUN current file&quot;,</span><br><span class="line">  &quot;command&quot;: &quot;run_existing_window_command&quot;, &quot;args&quot;:</span><br><span class="line">  &#123;&quot;id&quot;: &quot;repl_Python37_run&quot;,</span><br><span class="line">  &quot;file&quot;: &quot;config/Python37/Main.sublime-menu&quot;&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>pdb常用命令</p><p><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/sublimetext/1544017405048.png" alt="1544017405048"></p><h3 id="快捷键设置"><a href="#快捷键设置" class="headerlink" title="快捷键设置"></a>快捷键设置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">/*光标右侧为括号一类的字符时，回车键移动光标（回车的话用shift</span> <span class="string">enter）*/</span></span><br><span class="line">    <span class="string">&#123;"keys":</span> <span class="string">["enter"],</span> <span class="string">"command"</span><span class="string">:</span> <span class="string">"move"</span><span class="string">,</span> <span class="string">"args"</span><span class="string">:</span> <span class="string">&#123;"by":</span> <span class="string">"characters"</span><span class="string">,</span> <span class="string">"forward"</span><span class="string">:</span> <span class="literal">true</span><span class="string">&#125;,</span> <span class="string">"context"</span><span class="string">:</span></span><br><span class="line">        <span class="string">[</span></span><br><span class="line">            <span class="string">&#123;</span> <span class="string">"key"</span><span class="string">:</span> <span class="string">"following_text"</span><span class="string">,</span> <span class="string">"operator"</span><span class="string">:</span> <span class="string">"regex_contains"</span><span class="string">,</span> <span class="string">"operand"</span><span class="string">:</span> <span class="string">"^[)\\]\\&gt;\\'\\\"\\ %&gt;\\&#125;\\;\\,]"</span><span class="string">,</span> <span class="string">"match_all"</span><span class="string">:</span> <span class="literal">true</span> <span class="string">&#125;,</span></span><br><span class="line">            <span class="string">&#123;</span> <span class="string">"key"</span><span class="string">:</span> <span class="string">"preceding_text"</span><span class="string">,</span> <span class="string">"operator"</span><span class="string">:</span> <span class="string">"not_regex_match"</span><span class="string">,</span> <span class="string">"operand"</span><span class="string">:</span> <span class="string">"^.*\\&#123;$"</span><span class="string">,</span> <span class="string">"match_all"</span><span class="string">:</span> <span class="literal">true</span>  <span class="string">&#125;</span></span><br><span class="line">        <span class="string">]</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      最近重装了电脑上的Python跟Sublime Text，换用了Anaconda环境，把重新折腾Sublime Text的过程记录下来。
    
    </summary>
    
      <category term="Python学习" scheme="https://www.lixint.me/categories/Python%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="https://www.lixint.me/tags/Python/"/>
    
      <category term="Sublime Text" scheme="https://www.lixint.me/tags/Sublime-Text/"/>
    
      <category term="Anaconda" scheme="https://www.lixint.me/tags/Anaconda/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博文图片自动上传腾讯云、SMMS图床并替换博文内图片链接</title>
    <link href="https://www.lixint.me/markdownpic.html"/>
    <id>https://www.lixint.me/markdownpic.html</id>
    <published>2018-11-30T11:06:28.000Z</published>
    <updated>2018-12-06T06:39:39.071Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>欢迎加入博客搭建交流群（QQ群号60429576）==&gt;<a style="color:#ff0033" href="http://qq.cn.hn/g6Y" title="QQ群号60429576" rel="noopener" target="_blank"><strong>点击加入</strong></a>&lt;==</p></blockquote><h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>　　刚开始折腾Hexo博客的时候，各种修改各种查，发现网上许多教程已经过时了，于是乎决定把自己搭建博客的过程整理成文章。在用Typora写文章的时候发现，文章里插入的图片是个问题，尤其是在用截图的时候，习惯上都是截图直接粘贴进去。但是文章在发布的时候图片的地址还是用的本地路径，导致了图片显示有问题。<br>　　网上查了一下，大都是几种解决方法：插入后修改为相对路径，把图片放到<code>source</code>文件夹里；安装插件，渲染文章的时候自动替换图片链接。这两种都需要把图片放到Github Pages空间里，长此以往占用的内存会越来越大；还有就是使用在线的Markdown编辑器，可以实时把图片上传，这种还不错，但没试过截图插入行不行；再者就是提前把图片上传到图床，插入时就用图床的链接。感觉这几种解决方法都不是很完美，于是用我粗糙的Python技能写了一个脚本，用来在发布文章之前自动把文章中的图片上传到腾讯云存储对象或者SMMS图床，并且把返回来的链接替换掉原来的链接。</p><h3 id="关于脚本"><a href="#关于脚本" class="headerlink" title="关于脚本"></a>关于脚本</h3><p><a href="https://github.com/lixint/Hexo_blog_pic_upload" rel="noopener" target="_blank">项目Github链接</a><br>工作流程很简单，在运行脚本后脚本会用正则表达式匹配<code>!</code>开头<code>)</code>的链接（所以用Html语法插入的图片不管用），然后提取出里面的本地图片地址，根据运行脚本时候的选择上传到腾讯云存储对象或者SMMS图床。<br>然后根据反馈回来的图片链接再进行替换。</p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p>下载<code>uploadpic.py</code>放置在本地博客根目录。<br>博客根目录命令行格式<code>python uploadpic.py &lt;上传方法&gt; &lt;文章名&gt;</code></p><p>例如：<code>python uploadpic.py tx example.md</code>  上传至腾讯云。</p><h4 id="相关依赖"><a href="#相关依赖" class="headerlink" title="相关依赖"></a>相关依赖</h4><p>脚本使用<code>Python 3.4</code>编写<br>第三方依赖：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">requests</span><br><span class="line">cos-python-sdk-v5    使用腾讯云上传需要，github地址https://github.com/tencentyun/cos-python-sdk-v5</span><br></pre></td></tr></table></figure></p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>1.命令： <code>smms</code>、<code>tx</code><br>2.文件名需输入后缀<code>.md</code>，非Markdown语法暂不支持。<br>3.上传腾讯对象存储需要自己填写<code>secret_id</code>、<code>secret_key</code>、<code>region</code>、<code>Bucket</code>，上传后会自动根据上传日期建立一个YY-MM-DD格式的文件夹存储图片。</p><h4 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h4><p>1.错误处理不明朗，出错时只能慢慢查。<br>2.<del>遇到文章中带<code>js</code>脚本代码的，容易误处理。其他的非图片链接的<code>!</code>开头<code>)</code>结尾的字符串都会误处理。</del>（现已修正）</p><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><p><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/markdownpic/picupload.gif" alt="picupload"></p>]]></content>
    
    <summary type="html">
    
      为了方便发博文，我自己写了一个Python脚本来上传并替换Markdown博文中图片链接。
    
    </summary>
    
      <category term="Python学习" scheme="https://www.lixint.me/categories/Python%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Hexo" scheme="https://www.lixint.me/tags/Hexo/"/>
    
      <category term="Markdown" scheme="https://www.lixint.me/tags/Markdown/"/>
    
      <category term="Python" scheme="https://www.lixint.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客主题安装及Next主题个性化修改</title>
    <link href="https://www.lixint.me/hexo-theme-diy.html"/>
    <id>https://www.lixint.me/hexo-theme-diy.html</id>
    <published>2018-11-29T13:07:49.000Z</published>
    <updated>2018-12-06T03:11:36.993Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>欢迎加入博客搭建交流群（QQ群号60429576）==&gt;<a style="color:#ff0033" href="http://qq.cn.hn/g6Y" title="QQ群号60429576" rel="noopener" target="_blank"><strong>点击加入</strong></a>&lt;==</p></blockquote><p><strong><a style="color:#ff0033">写在最前面：</a></strong><br>1.在修改时请注意<a style="color:#ff0033"><strong>博客配置文件</strong></a>与<a style="color:#9900ff"><strong>主题配置文件</strong></a>的区别：<a style="color:#ff0033"><strong>博客配置文件</strong></a>是指博客根目录下的<code>_config.yml</code>文件，<br><a style="color:#9900ff"><strong>主题配置文件</strong></a>是指<code>/themes/主题名/</code>路径下的<code>_config.yml</code>文件，例如我使用的主题为next主题，<a style="color:#9900ff"><strong>主题配置文件</strong></a>为<code>/themes/next/_config.yml</code>。<br>2.文内所有命令行命令全部是在<strong>博客根目录打开命令行</strong>下输入的。根目录下目录结构为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p>默认情况下，命令行输入命令<code>ls</code>显示如下：<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/1543541234579.png" alt="1543541234579"></p><h2 id="index">目录</h2><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><a href="#设置作者头像">设置作者头像</a></td><td><a href="#设置作者昵称与站点描述">设置作者昵称与站点描述</a></td><td><a href="#设置代码高亮主题">设置代码高亮主题</a></td><td><a href="#侧边栏社交链接">侧边栏社交链接</a></td></tr><tr><td><a href="#开启打赏功能">开启打赏功能</a></td><td><a href="#修改打赏字体不闪动">修改打赏字体不闪动</a></td><td><a href="#开启友情链接or侧边栏推荐阅读">开启友情链接or侧边栏推荐阅读</a></td><td><a href="#设置RSS">设置RSS</a></td></tr><tr><td><a href="#设置网站图标">设置网站图标</a></td><td><a href="#实现全站及文章字数统计及阅读时长">实现全站及文章字数统计及阅读时长</a></td><td><a href="#添加顶部加载条">添加顶部加载条</a></td><td><a href="#自定义鼠标样式">自定义鼠标样式</a></td></tr><tr><td><a href="#实现点击出现桃心">实现点击出现桃心</a></td><td><a href="#修改网页底部的小图标">修改网页底部的小图标</a></td><td><a href="#去掉页面底部的强力驱动信息及设置备案信息">去掉页面底部的强力驱动信息及设置备案信息</a></td><td><a href="#添加动态背景">添加动态背景</a></td></tr><tr><td><a href="#增加波浪背景动画">增加波浪背景动画</a></td><td><a href="#forkme">在右上角实现fork me on github按钮</a></td><td><a href="#增加回到顶部按钮及显示当前浏览进度">增加回到顶部按钮及显示当前浏览进度</a></td><td><a href="#修改顶部菜单与下方信息栏的间隙大小">修改顶部菜单与下方信息栏的间隙大小</a></td></tr><tr><td><a href="#网站标题栏背景颜色">网站标题栏背景颜色</a></td><td><a href="#为博客加上萌萌的">为博客加上萌萌的</a></td><td><a href="#添加DaoVoice实现在线联系">添加DaoVoice实现在线联系</a></td><td><a href="#主页文章添加阴影效果">主页文章添加阴影效果</a></td></tr><tr><td><a href="#增加本地搜索功能">增加本地搜索功能</a></td><td><a href="#修改语言">修改语言</a></td><td><a href="#修改菜单及创建分类页">修改菜单及创建分类页</a></td><td><a href="#修改主题风格">修改主题风格</a></td></tr></tbody></table><h2 id="主题选择"><a href="#主题选择" class="headerlink" title="主题选择"></a>主题选择</h2><p>可以到<a href="https://hexo.io/themes/" rel="noopener" title="Nexo官方主题页" target="_blank">Nexo官方主题页</a>选择自己喜欢的主题，每个主题的使用方法略有不同，所以如果你是跟我一样的小白，建议使用流行热门的主题，这样出现问题网上基本都可以搜到解决方法。<br>推荐Next主题，我的博客使用的就是Next的主题</p><h2 id="Next主题修改"><a href="#Next主题修改" class="headerlink" title="Next主题修改"></a>Next主题修改</h2><p><span id="主题安装"></span></p><h3 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h3><p><a href="https://theme-next.iissnan.com/getting-started.html" rel="noopener" title="Next主题文档页面" target="_blank">Next主题文档页面</a><br>目前Next主题的项目分成了两个项目，一个是5.1.4版本以下的，一个是一直更新的，现在已经更新到了6.5，建议直接用最新的，最新版本的主题已经把很多常用的功能集成了，用起来很方便。本篇文章是基于Next 6.5进行的修改与展示。<br><a href="https://github.com/iissnan/hexo-theme-next" rel="noopener" title="Next主题项目页面(v5.1.4)" target="_blank">Next主题项目页面(v5.1.4)</a><br><a href="https://github.com/theme-next/hexo-theme-next" rel="noopener" title="v6.5页面" target="_blank">v6.5版本页面</a><br><strong>方法1</strong>：项目页面点击releases，找到最新版本的主题zip包并下载，解压放到<code>博客根目录/themes</code>重命名文件夹为next，两版本通用。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/blog20181128193847.png" alt="blog20181128193847"><br><strong>方法2</strong>：博客<strong>根目录</strong>打开命令行，用5.1版本输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>6.5版本输入命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p><p><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/blog20181128194258.png" alt="blog20181128194258">安装完成后，打开<a style="color:#ff0033"><strong>博客配置文件</strong></a>修改最上方的<code>theme</code>项为<code>next</code>。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/1543498259558.png" alt="1543498259558"><br><a style="color:#9900ff"><strong>主题配置文件</strong></a>是<code>根目录/themes/next</code>目录下的<code>_config.yml</code>文件。<br>修改完成后命令行输入<code>hexo s</code>本地运行一下看是否生效。</p><h3 id="主题修改"><a href="#主题修改" class="headerlink" title="主题修改"></a>主题修改</h3><p><span id="修改语言"></span></p><h4 id="修改语言"><a href="#修改语言" class="headerlink" title="修改语言"></a>修改语言</h4><p>修改<a style="color:#ff0033"><strong>博客配置文件</strong></a>下的<code>language</code>项为<code>zh-CN</code><br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/blog20181128200611.png" alt="blog20181128200611"><br>这里要<strong>注意</strong>一下，看一下主题文件夹内的<code>languange</code>文件夹中中文的配置文件叫什么名字，Next主题有些版本的叫<code>zh-Hans</code>那这里就填<code>zh-Hans</code>，Next最新版本中用的是<code>zh-CN</code>，故这里填写<code>zh-CN</code><br><span id="修改菜单及创建分类页"></span></p><h4 id="修改菜单及创建分类页"><a href="#修改菜单及创建分类页" class="headerlink" title="修改菜单及创建分类页"></a>修改菜单及创建分类页</h4><p>修改<a style="color:#9900ff"><strong>主题配置文件</strong></a>下的<code>menu</code>项，按需要打开菜单。例如我需要把<code>标签</code>页面打开，就把<code>tags</code>项前面的<code>#</code>去掉就行了。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/1543498503630.png" alt="1543498503630"><br><code>Hexo s</code>运行一下可以看到菜单多了一个标签项。但是此时还不行，只是有了入口。点击标签菜单，会显示：<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/1543498782215.png" alt="1543498782215"><br>因为只有了入口，但还没有标签页面，需要在命令行输入如下命令：<code>hexo new page tags</code>新建出标签页。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/1543498826765.png" alt="1543498826765"><br>同样的道理，开启分类页的时候要输入<code>hexo new page categories</code>来新建出分类页。<br><span id="修改主题风格"></span></p><h4 id="修改主题风格"><a href="#修改主题风格" class="headerlink" title="修改主题风格"></a>修改主题风格</h4><p>Next自带四种主题风格，可以在<a style="color:#9900ff"><strong>主题配置文件</strong></a>搜索Scheme项，将需要的风格前的#去掉，注意只能开启一个风格。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/blog20181128201721.png" alt="blog20181128201721"><br><span id="设置作者头像"></span></p><h4 id="设置作者头像"><a href="#设置作者头像" class="headerlink" title="设置作者头像"></a>设置作者头像</h4><p>编辑<a style="color:#9900ff"><strong>主题配置文件</strong></a>，搜索修改字段 <code>avatar</code>， 值设置成头像的链接地址。可以设置成在线的图片地址。也可以把图片放在本地。<br><strong>方法1：</strong><br>在线图片设置：现在有一张网络图片， 使用百度上随便搜的。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/avatar.jpg" alt="avatar"><br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/1543499047117.png" alt="1543499047117"><br><strong>方法2：</strong><br>本地设置：放置在<code>source/images</code>目录下，设置为<code>url: /images/avatar.jpg</code><br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/1543499063167.png" alt="1543499063167"><br>这个<code>rounded</code>项可以设置头像为圆形，设置为<code>ture</code>后会自动根据头像的尺寸将头像变化为圆形或者椭圆，头像图片为正方形的话则为圆形。长方形的话长宽相差越大，椭圆越明显。<br>设置<code>opacity</code>的值控制头像的透明度，值为0 - 1。<br><code>rotated</code>项为头像旋转，设置为<code>true</code>，则鼠标指到头像时头像会旋转。<br><span id="设置作者昵称与站点描述"></span></p><h4 id="设置作者昵称与站点描述"><a href="#设置作者昵称与站点描述" class="headerlink" title="设置作者昵称与站点描述"></a>设置作者昵称与站点描述</h4><p>这个比较简单。设置<a style="color:#ff0033"><strong>博客配置文件</strong></a>中的<code>author</code>为昵称，<code>description</code>为描述。<br>同理，<code>subtitle</code>为副标题，<code>keywords</code>为关键词，<code>timezone</code>为时区，可以按需求填写。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/1543499164417.png" alt="1543499164417"><br><span id="设置代码高亮主题"></span></p><h4 id="设置代码高亮主题"><a href="#设置代码高亮主题" class="headerlink" title="设置代码高亮主题"></a>设置代码高亮主题</h4><p>NexT 使用 <a href="https://github.com/chriskempson/tomorrow-theme" rel="noopener" title="Tomorrow Theme" target="_blank">Tomorrow Theme</a>作为代码高亮，共有5款主题供你选择。 NexT 默认使用的是 白色的 <code>normal</code> 主题，可选的值有 <code>normal</code>，<code>night</code>， <code>night blue</code>， <code>night bright</code>， <code>night eighties</code><br>更改 <a style="color:#9900ff"><strong>主题配置文件</strong></a>中的<code>highlight_theme</code> 字段，将其值设定成你所喜爱的高亮主题即可。<br><span id="侧边栏社交链接"></span></p><h4 id="侧边栏社交链接"><a href="#侧边栏社交链接" class="headerlink" title="侧边栏社交链接"></a>侧边栏社交链接</h4><p>侧栏社交链接的修改包含两个部分， 配置在 <a style="color:#9900ff"><strong>主题配置文件</strong></a> 中。<code>social</code>字段为连接，格式为<code>显示文本: 链接地址 || Font Awesome图标名称</code><br>例如：<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/blog20181128205617.png" alt="blog20181128205617"><br><code>图标名称</code> 是 Font Awesome 图标的名字（不必带 <code>fa-</code> 前缀）。<code>enable</code> 选项用于控制是否显示图标，你可以设置成 <code>false</code> 来去掉图标。例如: <code>百度: https://baidu.com || firefox</code><br>Font Awesome图标可以到<a href="www.fontawesome.com.cn" rel="external nofollow" title="Font Awesome" style="color:#ff0033">Font Awesome</a>查看<br><span id="开启打赏功能"></span></p><h4 id="开启打赏功能"><a href="#开启打赏功能" class="headerlink" title="开启打赏功能"></a>开启打赏功能</h4><p>主题自带支付宝跟微信及比特币打赏功能，只需要<a style="color:#9900ff"><strong>主题配置文件</strong></a> 中填入 <code>微信</code>和 <code>支付宝</code> 收款二维码图片地址即可开启该功能。<br>搜索<code>reward字段</code>，将<code>wechatpay</code>及<code>alipay</code>字段前面的<code>#</code>去掉即可。在<code>source</code>文件夹中放置支付宝跟微信收款码并修改文件名字即可。<code>reward_comment</code>自带为打赏按钮上方的文字，不需要的话可以在前面加#注释掉。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/1543499587192.png" alt="1543499587192"><br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/1543499663537.png" alt="1543499663537"><br><span id="修改打赏字体不闪动"></span></p><h5 id="修改打赏字体不闪动"><a href="#修改打赏字体不闪动" class="headerlink" title="修改打赏字体不闪动"></a>修改打赏字体不闪动</h5><p>鼠标一指就疯狂抖动。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/doudong.gif" alt="doudong"><br>修改文件<code>next/source/css/_common/components/post/post-reward.styl</code>，然后注释其中的函数<code>#QR &gt; div:hover p</code>函数即可。css文件注释用/<em>   和  </em>/ 包裹代码即可。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/blog20181128211016.png" alt="blog20181128211016"><br>这个<code>post-reward.styl</code>文件是跟按钮及图片相关的，如果需要修改关于打赏的其他属性，例如按钮大小，样式，图片大小等，都可以修改<code>post-reward.styl</code>文件实现。我也不太懂。在这就不展开讲了。有兴趣的可以网上搜css的语法自己尝试改。<br><span id="开启友情链接or侧边栏推荐阅读"></span></p><h4 id="开启友情链接-or-侧边栏推荐阅读"><a href="#开启友情链接-or-侧边栏推荐阅读" class="headerlink" title="开启友情链接 or 侧边栏推荐阅读"></a>开启友情链接 or 侧边栏推荐阅读</h4><p><a style="color:#9900ff"><strong>主题配置文件</strong></a> 中搜索<code>links_title</code>字段，修改<code>links_icon</code>、<code>links_title</code>、<code>links_layout</code>、<code>links</code>四个字段的内容实现自定义风格。<br><code>link_icon</code>是title前面的图标，用法跟之前的社交链接的图标用法是一样的， 用Font Awesome图标。<br><code>links_title</code>为标题，如果是作为友情链接使用，可以设置为<br><code>links_title: 友情链接</code><br>在<code>links</code>字段设置友情链接名字及链接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">links:</span><br><span class="line">  友联1: http://example.com/</span><br><span class="line">  友联2: http://example.com/</span><br></pre></td></tr></table></figure></p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">links:</span><br><span class="line">  谷歌: https://google.com/</span><br><span class="line">  百度: http://baidu.com/</span><br></pre></td></tr></table></figure><p><code>links_layout</code>为各个友情链接的布局，默认是block，也可以用<code>#</code>注释掉这一行用下一行的<code>inline</code>布局。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/1543500026413.png" alt="1543500026413"><br>这个模块的自由度比较高，可以用来放置友情链接，也可以放置推荐阅读。<br><span id="设置RSS"></span></p><h4 id="设置-RSS"><a href="#设置-RSS" class="headerlink" title="设置 RSS"></a>设置 RSS</h4><p>NexT 中 RSS 有三个设置选项，满足特定的使用场景。 更改<a style="color:#9900ff"><strong>主题配置文件</strong></a>，设定 <code>rss</code> 字段的值：</p><p><code>false</code>：禁用 RSS，不在页面上显示 RSS 连接。</p><p>留空：默认就是留空的，使用 Hexo 生成的 Feed 链接。 你可以需要先安装 <a href="https://github.com/hexojs/hexo-generator-feed" rel="noopener" title="hexo-generator-feed" target="_blank">hexo-generator-feed</a>  插件。</p><p>安装方法：根目录下命令行输入<code>npm install hexo-generator-feed --save</code><br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/blog20181128213214.png" alt="blog20181128213214"></p><p>具体的链接地址：适用于已经烧制过<code>Feed</code>的情形。<br>建议直接使用插件，比较省事。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/1543500185784.png" alt="1543500185784"><br><span id="设置网站图标"></span></p><h4 id="设置网站图标"><a href="#设置网站图标" class="headerlink" title="设置网站图标"></a>设置网站图标</h4><p>在<a href="http://www.easyicon.net" rel="noopener" title="EasyIcon" target="_blank">EasyIcon</a>中分别找一张（16 <em> 16与32 </em> 32）的<code>ico</code>图标,或者去别的网站下载或者制作，并将图标名称改为<code>favicon16.ico</code>与<code>favicon32.ico</code>，然后把图标放在<code>/themes/next/source/images</code>或者放在根目录的<code>/source/images</code>文件夹里。<br>在<a style="color:#9900ff"><strong>主题配置文件</strong></a>内搜索<code>favicon</code>字段，把 <code>small</code>、<code>medium</code>字段的地址修改为<code>/images/favicon16.ico</code> 与 <code>/images/favicon32.ico</code><br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/1543500338504.png" alt="1543500338504"><br><span id="实现全站及文章字数统计及阅读时长"></span></p><h4 id="实现全站及文章字数统计及阅读时长"><a href="#实现全站及文章字数统计及阅读时长" class="headerlink" title="实现全站及文章字数统计及阅读时长"></a>实现全站及文章字数统计及阅读时长</h4><p>根目录命令运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure></p><p><a style="color:#ff0033"><strong>博客配置文件</strong></a>底部添加如下内容，保存。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line"><span class="attr">  symbols:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  time:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_symbols:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_time:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/1543500434372.png" alt="1543500434372"><br>重新<code>hexo s</code>看一下，文章页面已经有字数跟阅读时长的统计了。网站底部也显示了网站总字数跟总阅读时长。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/1543500395667.png" alt="1543500395667"><br><span id="添加顶部加载条"></span></p><h4 id="添加顶部加载条"><a href="#添加顶部加载条" class="headerlink" title="添加顶部加载条"></a>添加顶部加载条</h4><p><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/jiazaitiao.gif" alt="jiazaitiao">最新版本的Next主题是内置了加载条功能的。<br>根目录打开命令行，输入如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-pace themes/next/source/lib/pace</span><br></pre></td></tr></table></figure></p><p><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/blog20181129162054.png" alt="blog20181129162054"><br>然后<a style="color:#9900ff"><strong>主题配置文件</strong></a>搜索<code>pace</code>字段，修改<code>pace: false</code>为<code>pace: true</code>即可开启加载条功能，修改下方的<code>pace-theme</code>字段还可以修改加载条的样式。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/1543500576120.png" alt="1543500576120"><br><span id="自定义鼠标样式"></span></p><h4 id="自定义鼠标样式"><a href="#自定义鼠标样式" class="headerlink" title="自定义鼠标样式"></a>自定义鼠标样式</h4><p>打开<code>themes/next/source/css/_custom/custom.styl</code>,在里面写下如下代码<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 鼠标样式</span><br><span class="line">  * &#123;</span><br><span class="line">      <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">"http://om8u46rmb.bkt.clouddn.com/sword2.ico"</span>),auto<span class="meta">!important</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">      <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">"http://om8u46rmb.bkt.clouddn.com/sword1.ico"</span>),auto<span class="meta">!important</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>在<a href="http://www.easyicon.net" rel="noopener" title="EasyIcon" target="_blank">EasyIcon</a>中找一张16 * 16的<code>ico</code>图，放在<code>/source/images/</code>中，修改上述代码中的链接为<code>/images/xxx.ico</code>，如果不放在本地的话，可以把图片放在图床，直接替换链接即可。<br>第一行的链接是默认状态下的鼠标样式，第二行的是鼠标按下时的样式。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/mouseico.gif" alt="mouseico"><br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/1543500770005.png" alt="1543500770005"><br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/1543500900414.png" alt="1543500900414"><br><span id="实现点击出现桃心"></span></p><h4 id="实现点击出现桃心-以及-爆炸效果"><a href="#实现点击出现桃心-以及-爆炸效果" class="headerlink" title="实现点击出现桃心 以及 爆炸效果"></a>实现点击出现桃心 以及 爆炸效果</h4><p><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/love.gif" alt="love"><br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/bom.gif" alt="bom"><br>1.在<code>/themes/next/source/js/src</code>下新建文件<code>love.js</code>并填入如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">"left:"</span>+d[e].x+<span class="string">"px;top:"</span>+d[e].y+<span class="string">"px;opacity:"</span>+d[e].alpha+<span class="string">";transform:scale("</span>+d[e].scale+<span class="string">","</span>+d[e].scale+<span class="string">") rotate(45deg);background:"</span>+d[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">"function"</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;setTimeout(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure></p><p>建一个叫<code>fireworks.js</code>的文件并写入如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;;</span><br></pre></td></tr></table></figure></p><p>然后打开<code>themes/next/layout/_layout.swig</code>,在<code>&lt;/body&gt;</code>上面写下如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.fireworks &amp;&amp; not theme.love %&#125;</span><br><span class="line"> &lt;canvas class=&quot;fireworks&quot; style=&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;/canvas&gt; </span><br><span class="line"> &lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;&gt;&lt;/script&gt; </span><br><span class="line"> &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/fireworks.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if theme.love &amp;&amp; not theme.fireworks %&#125;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/blog20181129205023.png" alt="blog20181129205023"><br>最后在<a style="color:#9900ff"><strong>主题配置文件</strong></a>最下方加入如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Fireworks and love</span><br><span class="line">fireworks: true</span><br><span class="line">love: false</span><br></pre></td></tr></table></figure></p><p><code>fireworks</code>是爆炸效果，<code>love</code>是心形效果。两个不能同时开。<br><span id="修改网页底部的小图标"></span></p><h4 id="修改网页底部的小图标"><a href="#修改网页底部的小图标" class="headerlink" title="修改网页底部的小图标"></a>修改网页底部的小图标</h4><p><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/blog20181129170824.png" alt="blog20181129170824"><br><a style="color:#9900ff"><strong>主题配置文件</strong></a>搜索<code>footer</code>字段，修改下方的<code>icon</code>字段下的<code>name</code>字段。<code>name</code>字段后的名字是 Font Awesome 图标的名字（不必带 <code>fa-</code> 前缀）。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/blog20181129171638.png" alt="blog20181129171638"><br><code>animated</code>自动为闪动开关，设置为<code>true</code>后图标会闪动。<br>以及可以设置图标颜色，<code>color</code>处填入16进制颜色代码即可。注意保留原来的双引号。<br><span id="去掉页面底部的强力驱动信息及设置备案信息"></span></p><h4 id="去掉页面底部的强力驱动信息及设置备案信息"><a href="#去掉页面底部的强力驱动信息及设置备案信息" class="headerlink" title="去掉页面底部的强力驱动信息及设置备案信息"></a>去掉页面底部的强力驱动信息及设置备案信息</h4><p><a style="color:#9900ff"><strong>主题配置文件</strong></a>搜索<code>copyright</code>字段，修改<code>powered</code>下的<code>enable</code>字段的<code>true</code>为<code>false</code>即可去掉强力驱动部分的内容。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/blog20181129172048.png" alt="blog20181129172048"><br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/blog20181129172144.png" alt="blog20181129172144"><br>同样的<code>theme</code>下的<code>enable</code>设置为<code>false</code>的话可以去掉页面底部的主题信息。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/blog20181129172232.png" alt="blog20181129172232"><br><code>enable</code>设置为<code>true</code>，<code>version</code>设置为<code>false</code>的话，则不显示版本号。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/blog20181129172311.png" alt="blog20181129172311"><br>如果博客有备案的话，下方<code>beian</code>字段设置为<code>true</code>，<code>icp</code>后填写备案号。<br><span id="添加动态背景"></span></p><h4 id="添加动态背景"><a href="#添加动态背景" class="headerlink" title="添加动态背景"></a>添加动态背景</h4><p><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/activebackground.gif" alt="activebackground"><br>根目录打开命令行，输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-canvas-nest themes/next/source/lib/canvas-nest</span><br></pre></td></tr></table></figure></p><p><a style="color:#9900ff"><strong>主题配置文件</strong></a>搜索<code>canvas-nest</code>字段，<code>enable</code>项设置为<code>true</code>。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/blog20181129173536.png" alt="blog20181129173536"><br>其他配置项说明：</p><ul><li><code>color</code> ：线条颜色, 默认: <code>&#39;0,0,0&#39;</code>；三个数字分别为(R,G,B)</li><li><code>opacity</code>: 线条透明度（0~1）, 默认: <code>0.5</code></li><li><code>count</code>: 线条的总数量, 默认: <code>150</code></li><li><code>zIndex:</code> 背景的z-index属性，css属性用于控制所在层的位置, 默认: <code>-1</code></li><li><code>onmobile</code>：是否在手机端显示。<br><span id="增加波浪背景动画"></span><h4 id="增加波浪背景动画"><a href="#增加波浪背景动画" class="headerlink" title="增加波浪背景动画"></a>增加波浪背景动画</h4><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/3d.gif" alt="3d"><br>根目录打开命令行，输入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-three themes/next/source/lib/three</span><br></pre></td></tr></table></figure></li></ul><p><a style="color:#9900ff"><strong>主题配置文件</strong></a>搜索<code>three_waves</code>字段，设置为<code>true</code><br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/blog20181129183551.png" alt="blog20181129183551"><br><code>three_waves</code>、<code>canvas_lines</code>、<code>canvas_sphere</code>三个的效果各不相同，可以自己尝试一下选一个喜欢的。<br><span id="forkme"></span></p><h4 id="在右上角实现fork-me-on-github按钮"><a href="#在右上角实现fork-me-on-github按钮" class="headerlink" title="在右上角实现fork me on github按钮"></a>在右上角实现fork me on github按钮</h4><p><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/blog20181129193000.png" alt="blog20181129193000">最新的Next主题已经内置了增加右上角的<code>Fork me on github</code>按钮功能，只需要在<a style="color:#9900ff"><strong>主题配置文件</strong></a>搜索<code>github_banner</code>字段，去掉前面的#，把<code>||</code>前面的github链接替换成自己的即可。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/blog20181129192947.png" alt="blog20181129192947"><br><code>||</code>后的参数为按钮的title，为鼠标指在按钮上时显示的文本。<br><span id="增加回到顶部按钮及显示当前浏览进度"></span></p><h4 id="增加回到顶部按钮及显示当前浏览进度"><a href="#增加回到顶部按钮及显示当前浏览进度" class="headerlink" title="增加回到顶部按钮及显示当前浏览进度"></a>增加回到顶部按钮及显示当前浏览进度</h4><p><a style="color:#9900ff"><strong>主题配置文件</strong></a>搜索<code>b2t</code>字段，将<code>b2t</code>字段的<code>false</code>修改为<code>true</code>即可，（注意此功能只能用于Pisces和Gemini主题）。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/blog20181129193327.png" alt="blog20181129193327"><br>将下方的<code>scrollpercent</code>字段设置为<code>true</code>即可实现当前浏览进度的显示。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/blog20181129193749.png" alt="blog20181129193749"><br><span id="修改顶部菜单与下方信息栏的间隙大小"></span></p><h4 id="修改顶部菜单与下方信息栏的间隙大小"><a href="#修改顶部菜单与下方信息栏的间隙大小" class="headerlink" title="修改顶部菜单与下方信息栏的间隙大小"></a>修改顶部菜单与下方信息栏的间隙大小</h4><p><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/1543501516957.png" alt="1543501516957"><br><a style="color:#9900ff"><strong>主题配置文件</strong></a>搜索<code>offset</code>字段，将<code>offset</code>的像素数大小设置为需要的值，默认为12。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/blog20181129194053.png" alt="blog20181129194053"><br><span id="网站标题栏背景颜色"></span></p><h4 id="网站标题栏背景颜色"><a href="#网站标题栏背景颜色" class="headerlink" title="网站标题栏背景颜色"></a>网站标题栏背景颜色</h4><p>打开 <code>themes/next/source/css/_custom/custom.styl</code> ,在里面写下如下代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 网站标题栏背景颜色</span><br><span class="line"><span class="selector-class">.site-meta</span> &#123;</span><br><span class="line">  background: #FF0033; //修改为自己喜欢的颜色</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>颜色的值可以自行网上搜索16进制颜色进行修改。<br><span id="为博客加上萌萌的"></span></p><h4 id="为博客加上萌萌的"><a href="#为博客加上萌萌的" class="headerlink" title="为博客加上萌萌的"></a>为博客加上萌萌的</h4><p><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/chongwu.gif" alt="chongwu"><br>首先安装插件，根目录命令行输入<code>npm install --save hexo-helper-live2d</code><br><a style="color:#9900ff"><strong>主题配置文件</strong></a>最下方添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># Live2D</span><br><span class="line">## https://github.com/xiazeyu/live2d-widget.js</span><br><span class="line">## https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init</span><br><span class="line">live2d:</span><br><span class="line">  model:</span><br><span class="line">    scale: 1</span><br><span class="line">    hHeadPos: 0.5</span><br><span class="line">    vHeadPos: 0.618</span><br><span class="line">  display:</span><br><span class="line">    superSample: 2</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">    position: right</span><br><span class="line">    hOffset: 0</span><br><span class="line">    vOffset: -20</span><br><span class="line">  mobile:</span><br><span class="line">    show: true</span><br><span class="line">    scale: 0.5</span><br><span class="line">  react:</span><br><span class="line">    opacityDefault: 0.7</span><br><span class="line">    opacityOnHover: 0.2</span><br></pre></td></tr></table></figure></p><p>更多设置可以查看<a href="https://github.com/EYHN/hexo-helper-live2d" rel="noopener" title="官方文档" target="_blank">官方文档</a><br><span id="添加DaoVoice实现在线联系"></span></p><h4 id="添加DaoVoice-实现在线联系"><a href="#添加DaoVoice-实现在线联系" class="headerlink" title="添加DaoVoice 实现在线联系"></a>添加DaoVoice 实现在线联系</h4><p><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/dovoice.gif" alt="dovoice"><br>本功能可以实现在线留言，作者会收到邮件，如果绑定了微信，作者还会收到微信通知。<br>首先到<a href="http://dashboard.daovoice.io/get-started?invite_code=e25c1e73" rel="noopener" title="DaoVoice" target="_blank">DaoVoice</a>注册一个Daovioce账号。<br>注册完成后会进到DaoCloud，重新访问连接即可。进到Daovoice面板，点击左侧边栏的<code>应用设置-- 安装到网站</code>。在下方的代码中会看到<code>app_id: &quot;xxxx&quot;</code>字样。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/blog20181129200739.png" alt="blog20181129200739"><br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/blog20181129200805.png" alt="blog20181129200805"><br>打开 <code>themes/next/layout/_partials/head/head.swig</code> 文件中最下方加入如下代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.daovoice %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  (<span class="function"><span class="keyword">function</span>(<span class="params">i,s,o,g,r,a,m</span>)</span>&#123;i[<span class="string">"DaoVoiceObject"</span>]=r;i[r]=i[r]||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;(i[r].q=i[r].q||[]).push(<span class="built_in">arguments</span>)&#125;,i[r].l=<span class="number">1</span>*<span class="keyword">new</span> <span class="built_in">Date</span>();a=s.createElement(o),m=s.getElementsByTagName(o)[<span class="number">0</span>];a.async=<span class="number">1</span>;a.src=g;a.charset=<span class="string">"utf-8"</span>;m.parentNode.insertBefore(a,m)&#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>,<span class="string">"script"</span>,(<span class="string">'https:'</span> == <span class="built_in">document</span>.location.protocol ? <span class="string">'https:'</span> : <span class="string">'http:'</span>) + <span class="string">"//widget.daovoice.io/widget/0f81ff2f.js"</span>,<span class="string">"daovoice"</span>)</span></span><br><span class="line"><span class="javascript">  daovoice(<span class="string">'init'</span>, &#123;</span></span><br><span class="line"><span class="javascript">      app_id: <span class="string">"&#123;&#123;theme.daovoice_app_id&#125;&#125;"</span></span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="javascript">  daovoice(<span class="string">'update'</span>);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p><p>在<a style="color:#9900ff"><strong>主题配置文件</strong></a> <code>_config.yml</code>，添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># DaoVoice </span><br><span class="line">daovoice: true</span><br><span class="line">daovoice_app_id: 这里输入前面获取的app_id</span><br></pre></td></tr></table></figure></p><p>回到Daovoice控制面板，点击聊天设置可以对聊天图标的颜色及位置进行设置。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/blog20181129201302.png" alt="blog20181129201302"><br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/blog20181129202642.png" alt="blog20181129202642"><br>最后到右上角选择管理员，微信绑定，可以绑定你的微信号。这样收到消息后可以通过小程序进行回复。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/blog20181129202629.png" alt="blog20181129202629"><br><span id="主页文章添加阴影效果"></span></p><h4 id="主页文章添加阴影效果"><a href="#主页文章添加阴影效果" class="headerlink" title="主页文章添加阴影效果"></a>主页文章添加阴影效果</h4><p>打开<code>\themes\next\source\css\_custom\custom.styl</code>,加入如下代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 主页文章添加阴影效果</span><br><span class="line"> <span class="selector-class">.post</span> &#123;</span><br><span class="line">   <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">   <span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">   <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(202, 203, 203, .5);</span><br><span class="line">   <span class="attribute">-moz-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(202, 203, 204, .5);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>可以自行修改代码来修改阴影效果。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/blog20181129205545.png" alt="blog20181129205545"><br><span id="增加本地搜索功能"></span></p><h4 id="增加本地搜索功能"><a href="#增加本地搜索功能" class="headerlink" title="增加本地搜索功能"></a>增加本地搜索功能</h4><p>首先安装插件，根目录命令行输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></p><p><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/1543541556072.png" alt="1543541556072"><br>编辑<a style="color:#ff0033"><strong>博客配置文件</strong></a>，新增以下内容到任意位置：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">  field:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">  format:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure></p><p><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/1543541568512.png" alt="1543541568512"><br><a style="color:#9900ff"><strong>主题配置文件</strong></a>搜索<code>local_search</code>字段，设置<code>enable</code>为<code>true</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure></p><p><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-theme-diy/1543543765215.png" alt="1543543765215"><br>配置完成后保存，<code>hexo g</code>、<code>hexo s</code>查看。</p><h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1>]]></content>
    
    <summary type="html">
    
      博客搭建以及几十种主题修改方法（基于Next主题）
    
    </summary>
    
      <category term="博客搭建" scheme="https://www.lixint.me/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Hexo" scheme="https://www.lixint.me/tags/Hexo/"/>
    
      <category term="博客搭建" scheme="https://www.lixint.me/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
      <category term="Next主题" scheme="https://www.lixint.me/tags/Next%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>本地安装Hexo博客框架及发布至Github Pages</title>
    <link href="https://www.lixint.me/hexo-githubpages.html"/>
    <id>https://www.lixint.me/hexo-githubpages.html</id>
    <published>2018-11-22T12:23:35.000Z</published>
    <updated>2018-12-04T02:36:10.823Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>欢迎加入博客搭建交流群（QQ群号60429576）==&gt;<a style="color:#ff0033" href="http://qq.cn.hn/g6Y" title="QQ群号60429576" rel="noopener" target="_blank"><strong>点击加入</strong></a>&lt;==</p></blockquote><p>前面的文章中我们进行了<br><strong>1. </strong><a href="https://www.lixint.me/githubpage.html" title="Github注册以及Github Pages创建">Github注册以及Github Pages创建</a><br><strong>2. </strong> <a href="https://www.lixint.me/hexo-git.html" title="Hexo博客本地环境安装">Hexo博客本地环境安装</a><br>下一步，我们就要进行本地Hexo博客框架的搭建，完成一个能够在本地访问的博客页面。</p><h3 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h3><p><a href="https://hexo.io/zh-cn/" rel="noopener" title="Hexo中文官方网站" target="_blank">Hexo</a>是一个快速, 简洁且高效的博客框架. 让上百个页面在几秒内瞬间完成渲染. <code>Hexo</code>支持<code>Github Flavored Markdown</code>的所有功能, 甚至可以整合<code>Octopress</code>的大多数插件. 并自己也拥有强大的插件系统。</p><h3 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h3><p>本步骤需要Git与Node.js的支持，如果没有安装的话请参照<a href="https://www.lixint.me/hexo-git.html" title="Hexo博客本地环境安装">Hexo博客本地环境安装</a>进行安装。</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>电脑中任选盘符新建一个文件夹作为博客网站的根目录，文件名好不要是中文。<br>空白处右键点击<code>Git Bash here</code><br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-githubpages/blog20181122204735.png" alt="blog20181122204735"><br>在<img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-githubpages/blog20181122205327.png" alt="blog20181122205327"><br>出现的命令行窗口中输入<code>npm install -g hexo-cli</code>，等待运行完成依次输入以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;新建文件夹的名称&gt;</span><br><span class="line">cd &lt;新建文件夹的名称&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-githubpages/1542892357260.png" alt="1542892357260"><br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-githubpages/1542892463508.png" alt="1542892463508">等待运行完成，此时文件夹中多了许多文件。<br><strong>注意</strong>：<strong>后续的命令均需要在<a style="color:#DC143C">站点目录</a>下（即文件夹内）使用Git Bash运行。</strong><br>此时Hexo框架的本地搭建已经完成了。我们来运行一下看看：<br>命令行依次输入以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></p><p><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-githubpages/1542892849938.png" alt="1542892849938"><br>浏览器中打开<a style="color:#fffff">http://locakhost:4000</a>或者<a style="color:#fffff">127.0.0.1:4000</a><br>可以看到一个网页，说明Hexo博客已经成功在本地运行。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-githubpages/1542893053692.png" alt="1542893053692"></p><h3 id="本地博客发布到Github-Pages"><a href="#本地博客发布到Github-Pages" class="headerlink" title="本地博客发布到Github Pages"></a>本地博客发布到Github Pages</h3><p><strong>第一步</strong>，需要在Github上创建好Github Pages仓库。<a href="https://www.lixint.me/githubpage.html" title="Github注册以及Github Pages创建">Github注册以及Github Pages创建</a><br><strong>第二步</strong>，安装发布插件。<br>在<strong>站点目录</strong>中运行命令行输入<code>npm install hexo-deployer-git --save</code><br>后续博客的修改等等各种功能  都需要安装各种<strong>插件</strong>。这个对博客的帮助是非常大的。<br>等待插件安装完成。<br><strong>第三步</strong>，将本地目录与Github关联起来。<br>命令行输入<code>ssh-keygen -t rsa -C &quot;邮箱地址&quot;</code>，这里要输入之前注册Github时的邮箱，例如我之前注册用的是 <a style="color:#fffff">example@163.com</a>，那命令行就输入<code>ssh-keygen -t rsa -C &quot;example@163.com&quot;</code>输入后一直回车。<br>打开<code>C:\Users\用户名</code>，文件夹内寻找<code>.ssh</code>文件夹<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-githubpages/1543324211395.png" alt="1543324211395"><br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-githubpages/1543324256289.png" alt="1543324256289"><br>文件夹内会有两个文件，一个<code>id_rsa.pub</code>一个<code>id_rsa</code>，用文本方式打开<code>id_rsa.pub</code>，推荐使用Notepad++，复制里面的的内容。<br>打开Github 点击右上角的头像 Settings  选择SSH and GPG keys<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-githubpages/1543324878366.png" alt="1543324878366"><br>点击New SSH key  将之前复制的内容粘帖到Key的框中。  上面的title 可以随意  点击add  完成添加。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-githubpages/1543324991690.png" alt="1543324991690"><br>此时回到命令行。 试一下是否跟Github连接成功。命令行输入<code>ssh -T git@github.com</code> ，弹出的内容输入<code>yes</code>，看到出现<code>Hi &lt;account name&gt;! You&#39;ve successfully authenticated, but GitHub doesnot provide shell access.</code> 说明链接成功。此处这个<code>&lt;account name&gt;</code>应该是你Github的用户名。<br><strong>第四步</strong> 修改Hexo站点的配置文件。<br>进入博客文件夹，找到<code>_config.yml</code>文件。 这个是<strong>博客配置文件</strong>，后面的修改会多次用到它。用<strong>Notepad++</strong>打开。<br>修改一下title跟url等，url修改为<code>https://&lt;用户名&gt;.github.io</code>，例如我的用户名是example的话，就应该输入<code>https://example.github.io</code><br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-githubpages/1543325561106.png" alt="1543325561106"><br>拉到文件最底部，在deploy下面添加一个repo项  一个branch项。填入如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type: git</span><br><span class="line">repo: git@github.com:&lt;Github用户名&gt;/&lt;github用户名&gt;.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure></p><p>图中也是以用户名为example为例。填写完成后保存即可。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-githubpages/1543325906143.png" alt="1543325906143"><br><strong>第五步</strong> 生成页面上传至Github<br>命令行输入<code>hexo g</code>，此时Hexo会根据配置文件渲染出一套静态页面。<br>完成后输入<code>hexo d</code>，此时会将之前渲染出的一系列文件上传至Github。<br><strong>Tips</strong>： 也可以直接输入<code>hexo g -d</code>直接完成渲染和上传。<br>上传完成后，打开<a style="color:#fffff"><em>https://&lt;用户名&gt;.github.io</em></a>查看上传的网页。如果页面变成了之前本地调试时的样子，说明上传以及完成了。没变的话查看一下上传时命令行窗口的信息有没有错误信息，没有的话清除一下浏览器缓存试试。</p>]]></content>
    
    <summary type="html">
    
      从零开始搭建博客第三部分，本地安装Hexo博客框架并发布至Github Pages
    
    </summary>
    
      <category term="博客搭建" scheme="https://www.lixint.me/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Github Pages" scheme="https://www.lixint.me/tags/Github-Pages/"/>
    
      <category term="Github" scheme="https://www.lixint.me/tags/Github/"/>
    
      <category term="Git" scheme="https://www.lixint.me/tags/Git/"/>
    
      <category term="博客搭建" scheme="https://www.lixint.me/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客本地环境安装步骤</title>
    <link href="https://www.lixint.me/hexo-git.html"/>
    <id>https://www.lixint.me/hexo-git.html</id>
    <published>2018-11-21T11:51:54.000Z</published>
    <updated>2018-12-04T02:34:34.188Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>欢迎加入博客搭建交流群（QQ群号60429576）==&gt;<a style="color:#ff0033" href="http://qq.cn.hn/g6Y" title="QQ群号60429576" rel="noopener" target="_blank"><strong>点击加入</strong></a>&lt;==</p></blockquote><p>本篇文章主要进行了Hexo博客搭建本地环境的配置及将博客发布至Github Pages。成功将Hexo博客在本地及GIthub Pages运行。</p><h3 id="本地环境安装"><a href="#本地环境安装" class="headerlink" title="本地环境安装"></a>本地环境安装</h3><h4 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h4><p>打开<a href="https://nodejs.org/zh-cn/download/" rel="noopener" title="Node.js下载页" target="_blank">Node.js下载页</a>选择Windows安装包，根据系统选择32位或者64位进行下载。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-git/1542803398643.png" alt="1542803398643"><br>下载完成后打开进行安装。<br>步骤1：勾选<code>I accept</code>，Next<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-git/blog20181121183846.png" alt="blog20181121183846"><br>步骤2：设置安装路径，默认即可<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-git/blog20181121183854.png" alt="blog20181121183854"><br>步骤3：选择需要安装的包，默认即可<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-git/blog20181121183920.png" alt="blog20181121183920"><br>步骤4：默认即可<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-git/blog20181121183925.png" alt="blog20181121183925"><br>步骤5：Next<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-git/blog20181121183843.png" alt="blog20181121183843"><br>步骤6：点击<code>Finish</code>完成安装。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-git/install-node-msi-version-on-windows-step8.png" alt="install-node-msi-version-on-windows-step8"><br>步骤7：检查一下Node.js版本<br>开始 - 运行 - 输入cmd ，输入<code>node --version</code>，可以看到Node.js的版本。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-git/1542806958800.png" alt="1542806958800"></p><h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><p>Git安装跟Node.js一样简单，打开<a href="https://git-scm.com/" rel="noopener" title="Git下载页" target="_blank">Git下载页</a>，点击右侧的下载按钮。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-git/1542807143006.png" alt="1542807143006"><br>下载完成后，打开安装，这个步骤比较多，一路Next即可，无需过多配置。<br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-git/blog20181121184504.png" alt="blog20181121184504"><br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-git/blog20181121184507.png" alt="blog20181121184507"><br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-git/blog20181121184510.png" alt="blog20181121184510"><br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-git/blog20181121184514.png" alt="blog20181121184514"><br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-git/blog20181121184518.png" alt="blog20181121184518"><br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-git/blog20181121184521.png" alt="blog20181121184521"><br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-git/blog20181121184549.png" alt="blog20181121184549"><br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-git/blog20181121184551.png" alt="blog20181121184551"><br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-git/blog20181121184554.png" alt="blog20181121184554"><br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-git/blog20181121184558.png" alt="blog20181121184558"><br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-git/blog20181121184601.png![blog20181121184607](https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-git/blog20181121184607.png" alt="blog20181121184601"><br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-git/blog20181121184640.png" alt="blog20181121184640"><br>点击Finish完成安装。<br>此时在桌面空白处点击右键，你就会发现右键菜单多了两个命令  <code>Git GUI here</code>和<code>Git bash here</code><br><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/hexo-git/blog20181121184711.png" alt="blog20181121184711"><br>至此，Node.js和Git全部安装完成。<br>后面我们要进行Hexo博客框架的安装以及将博客发布到Github Pages。</p>]]></content>
    
    <summary type="html">
    
      从零开始搭建博客第二部分，本地Node.js、Git安装
    
    </summary>
    
      <category term="博客搭建" scheme="https://www.lixint.me/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Hexo" scheme="https://www.lixint.me/tags/Hexo/"/>
    
      <category term="Github" scheme="https://www.lixint.me/tags/Github/"/>
    
      <category term="Git" scheme="https://www.lixint.me/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>【持续更新】Github Pages + Hexo 博客搭建，Next主题个性化修改</title>
    <link href="https://www.lixint.me/hexo-blog.html"/>
    <id>https://www.lixint.me/hexo-blog.html</id>
    <published>2018-11-21T09:37:10.000Z</published>
    <updated>2018-12-04T02:33:19.164Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>欢迎加入博客搭建交流群（QQ群号60429576）==&gt;<a style="color:#ff0033" href="http://qq.cn.hn/g6Y" title="QQ群号60429576" rel="noopener" target="_blank"><strong>点击加入</strong></a>&lt;==</p></blockquote><p><a href="创建https://www.lixint.me/githubpage.html">Github注册以及Github Pages</a><br><a href="https://www.lixint.me/hexo-git.html">Hexo博客本地环境安装步骤</a><br><a href="https://www.lixint.me/hexo-githubpages.html">本地安装Hexo博客框架及发布至Github Pages</a><br><a href="https://www.lixint.me/hexo-theme-diy.html">Hexo博客主题安装及Next主题个性化修改</a></p><p>后续内容正在整理中。</p>]]></content>
    
    <summary type="html">
    
      从零开始搭建博客，总结自己搭建博客时候的流程以及踩过的一些坑。
    
    </summary>
    
      <category term="博客搭建" scheme="https://www.lixint.me/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Hexo" scheme="https://www.lixint.me/tags/Hexo/"/>
    
      <category term="NEXT主题" scheme="https://www.lixint.me/tags/NEXT%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Github注册以及Github Pages创建</title>
    <link href="https://www.lixint.me/githubpage.html"/>
    <id>https://www.lixint.me/githubpage.html</id>
    <published>2018-11-21T04:05:10.000Z</published>
    <updated>2018-12-04T02:27:10.509Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>欢迎加入博客搭建交流群（QQ群号60429576）==&gt;<a style="color:#ff0033" href="http://qq.cn.hn/g6Y" title="QQ群号60429576" rel="noopener" target="_blank"><strong>点击加入</strong></a>&lt;==</p></blockquote><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="注册Github，建立Gihub-Pages仓库"><a href="#注册Github，建立Gihub-Pages仓库" class="headerlink" title="注册Github，建立Gihub Pages仓库"></a>注册Github，建立Gihub Pages仓库</h4><p>打开<a href="http://github.com" rel="noopener" title="Github首页" target="_blank">Github首页</a>，点击右上角的<strong>Sign up</strong>或者直接在2处填写信息后点击<code>Sign up for Github</code>进行注册。</p><p><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/githubpage/1542779914101-1542779914232.png" alt="1542779914101"></p><p><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/githubpage/1542780176909-1542780177376.png" alt="1542780176909"><br>Verify account处点击两侧的箭头让图上的动物变成正的，验证完成后点击下方的<code>Creat an account</code>进到下一步。</p><p><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/githubpage/1542780307073-1542780307139.png" alt="1542780307073"></p><p>选择<code>Free</code>方案，下方的两个选项可选可不选，点击<code>Continue</code>继续</p><p><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/githubpage/1542780585618.png" alt="1542780585618"><br>然后选择<code>Skip this step</code>完成Github的注册。此时Github会给你注册时填写的邮箱发送一封验证邮件，完成邮箱验证后才可以创建仓库。</p><p><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/githubpage/1542780713264-1542780713495.png" alt="1542780713264"></p><p><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/githubpage/1542780938381-1542780938491.png" alt="1542780938381">完成验证后，依次点击1，2处，在新页面点击<code>NEW</code>按钮。或者直接点击3处进行仓库创建。</p><p><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/githubpage/1542781101767-1542781101882.png" alt="1542781101767"><br>填入必要的信息，这里的仓库名必须要填<code>&lt;用户名&gt;.github.io</code>例如，图示我注册的账户名为<code>creataccount2</code>，仓库名就需要填写<code>creataccount2.github.io</code>。<br>填写必要的描述，也可不填。勾选<code>Initialize this repository with a README</code>点击<code>Creat repository</code>进行创建。</p><p><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/githubpage/1542781520728-1542781520914.png" alt="1542781520728"></p><p>依次点击1，2新建一个文件。<img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/githubpage/1542781616730-1542781617191.png" alt="1542781616730"></p><p>文件名为<code>index.html</code>，内容随意。点击<code>Commit new file</code>进行创建。</p><p>打开<code>&lt;用户名&gt;.github.io</code></p><p><img src="https://myself-1252916396.cos.ap-shanghai.myqcloud.com/githubpage/1542781764847-1542781764971.png" alt="1542781764847"></p><p>一个简单的网页，内容就是刚才我们输入的内容。</p><p>至此，Github Pages已经创建完成了。后续我们将利用Hexo博客框架对Github Pages的内容进行进一步的丰富。</p>]]></content>
    
    <summary type="html">
    
      从零开始搭建博客第一部分，Github注册及Github Pages建立
    
    </summary>
    
      <category term="博客搭建" scheme="https://www.lixint.me/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Github Pages" scheme="https://www.lixint.me/tags/Github-Pages/"/>
    
      <category term="Github" scheme="https://www.lixint.me/tags/Github/"/>
    
  </entry>
  
</feed>
