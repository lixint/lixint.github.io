<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Next主题修改第二弹]]></title>
    <url>%2Fnext2.html</url>
    <content type="text"><![CDATA[修改文章内链接文本样式修改文件 themes\next\source\css\_common\components\post\post.styl，在末尾添加如下css样式。 1234567891011// 文章内链接文本样式.post-body p a&#123; color: #0593d3; border-bottom: none; border-bottom: 1px solid #0593d3; &amp;:hover &#123; color: #fc6423; border-bottom: none; border-bottom: 1px solid #fc6423; &#125;&#125; 其中选择.post-body 是为了不影响标题，选择 p 是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。 修改文章底部的那个带#号的标签效果 修改模板/themes/next/layout/_macro/post.swig，搜索 rel=&quot;tag&quot;&gt;#，将 # 换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;，此处的图标用的是Font-Awesome，可以根据需要换成其他的图标。 在每篇文章末尾统一添加“本文结束”标记在路径 \themes\next\layout\_macro 中新建 passage-end-tag.swig 文件,并添加以下内容： 12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 接着打开\themes\next\layout\_macro\post.swig文件，在post-body 之后， post-footer 之前添加如下代码： 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &apos;passage-end-tag.swig&apos; %&#125; &#123;% endif %&#125;&lt;/div&gt; 然后打开主题配置文件,在末尾添加： 123# 文章末尾添加“本文结束”标记passage_end_tag: enabled: true 博文压缩安装插件，在站点的根目录下执行以下命令： 12npm install gulp -gnpm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save 博客根目录新建文件 gulpfile.js，填入软下代码： 1`var gulp = require(&apos;gulp&apos;);var minifycss = require(&apos;gulp-minify-css&apos;);var uglify = require(&apos;gulp-uglify&apos;);var htmlmin = require(&apos;gulp-htmlmin&apos;);var htmlclean = require(&apos;gulp-htmlclean&apos;);// 压缩 public 目录 cssgulp.task(&apos;minify-css&apos;, function() &#123; return gulp.src(&apos;./public/**/*.css&apos;) .pipe(minifycss()) .pipe(gulp.dest(&apos;./public&apos;));&#125;);// 压缩 public 目录 htmlgulp.task(&apos;minify-html&apos;, function() &#123; return gulp.src(&apos;./public/**/*.html&apos;) .pipe(htmlclean()) .pipe(htmlmin(&#123; removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, &#125;)) .pipe(gulp.dest(&apos;./public&apos;))&#125;);// 压缩 public/js 目录 jsgulp.task(&apos;minify-js&apos;, function() &#123; return gulp.src(&apos;./public/**/*.js&apos;) .pipe(uglify()) .pipe(gulp.dest(&apos;./public&apos;));&#125;);// 执行 gulp 命令时执行的任务gulp.task(&apos;default&apos;, [ &apos;minify-html&apos;,&apos;minify-css&apos;,&apos;minify-js&apos;]);` 生成博文时执行 hexo g &amp;&amp; gulp 就会根据 gulpfile.js 中的配置，对 public 目录中的静态资源文件进行压缩。 修改行内代码块代码颜色打开\themes\next\source\css\_custom\custom.styl,向里面加入：(颜色可以自己定义)。 123456789101112131415// Custom styles.code &#123; color: #ff7600; background: #fbf7f8; margin: 2px;&#125;// 大代码块的自定义样式.highlight, pre &#123; margin: 5px 0; padding: 5px; border-radius: 3px;&#125;.highlight, code, pre &#123; border: 1px solid #d6d6d6;&#125; 在网站底部加上访问量打开主题配置文件搜索busuanzi_count，对如下项目将false设置为true。其中的icon项目使用的也是Font-Awesome。total项为站点总统计，显示在站点首页底部，分为total_visitors：总访问人数，total_views：总访问量。post_views为文章访问量，显示在文章页面的标题下方。 12345678busuanzi_count: enable: true total_visitors: true total_visitors_icon: user total_views: true total_views_icon: eye post_views: true post_views_icon: eye 注意：不蒜子之前更新过一次，Next主题如果设置后不生效请检查一下themes\next\layout\_third-party\analyticsbusuanzi-counter.swig文件中的链接是否是https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js 添加 README.md 文件每个项目下一般都有一个 README.md 文件，但是使用 hexo 部署到仓库后，项目下是没有 README.md 文件的。 在 Hexo 目录下的 source 根目录下添加一个 README.md 文件，修改站点配置文件 _config.yml，将 skip_render 参数的值设置为 1skip_render: README.md 保存退出即可。再次使用 hexo d 命令部署博客的时候就不会在渲染 README.md 这个文件了。 在文章底部增加版权信息最新版本的Next主题是内置了版权信息的，主题配置文件搜索post_copyright设置为true即可。 如果没有这个项目，可以按照以下方法添加自定义版权信息： 在目录 next/layout/_macro/下添加 my-copyright.swig： 123456789101112131415161718192021222324252627282930&#123;% if page.copyright %&#125;&lt;div class="my_post_copyright"&gt; &lt;script src="//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js"&gt;&lt;/script&gt; &lt;!-- JS库 sweetalert 可修改路径 --&gt; &lt;script src="https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js"&gt;&lt;/script&gt; &lt;script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"&gt;&lt;/script&gt; &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&lt;a href="&#123;&#123; url_for(page.path) &#125;&#125;"&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&lt;a href="/" title="访问 &#123;&#123; theme.author &#125;&#125; 的个人博客"&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&#123;&#123; page.date.format("YYYY年MM月DD日 - HH:mm") &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&#123;&#123; page.updated.format("YYYY年MM月DD日 - HH:mm") &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href="&#123;&#123; url_for(page.path) &#125;&#125;" title="&#123;&#123; page.title &#125;&#125;"&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt; &lt;span class="copy-path" title="点击复制文章链接"&gt;&lt;i class="fa fa-clipboard" data-clipboard-text="&#123;&#123; page.permalink &#125;&#125;" aria-label="复制成功！"&gt;&lt;/i&gt;&lt;/span&gt; &lt;/p&gt; &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class="fa fa-creative-commons"&gt;&lt;/i&gt; &lt;a rel="license" href="https://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" title="Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)"&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;/a&gt; 转载请保留原文链接及作者。&lt;/p&gt; &lt;/div&gt;&lt;script&gt; var clipboard = new Clipboard('.fa-clipboard'); $(".fa-clipboard").click(function()&#123; clipboard.on('success', function()&#123; swal(&#123; title: "", text: '复制成功', icon: "success", showConfirmButton: true &#125;); &#125;); &#125;); &lt;/script&gt;&#123;% endif %&#125; 在目录next/source/css/_common/components/post/下添加my-post-copyright.styl： 123456789101112131415161718192021222324252627282930313233343536373839404142434445.my_post_copyright &#123; width: 85%; max-width: 45em; margin: 2.8em auto 0; padding: 0.5em 1.0em; border: 1px solid #d3d3d3; font-size: 0.93rem; line-height: 1.6em; word-break: break-all; background: rgba(255,255,255,0.4);&#125;.my_post_copyright p&#123;margin:0;&#125;.my_post_copyright span &#123; display: inline-block; width: 5.2em; color: #b5b5b5; font-weight: bold;&#125;.my_post_copyright .raw &#123; margin-left: 1em; width: 5em;&#125;.my_post_copyright a &#123; color: #808080; border-bottom:0;&#125;.my_post_copyright a:hover &#123; color: #a3d2a3; text-decoration: underline;&#125;.my_post_copyright:hover .fa-clipboard &#123; color: #000;&#125;.my_post_copyright .post-url:hover &#123; font-weight: normal;&#125;.my_post_copyright .copy-path &#123; margin-left: 1em; width: 1em; +mobile()&#123;display:none;&#125;&#125;.my_post_copyright .copy-path:hover &#123; color: #808080; cursor: pointer;&#125; 修改next/layout/_macro/post.swig，在代码 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &apos;wechat-subscriber.swig&apos; %&#125; &#123;% endif %&#125;&lt;/div&gt; 之前添加增加如下代码： 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &apos;my-copyright.swig&apos; %&#125; &#123;% endif %&#125;&lt;/div&gt; 修改next/source/css/_common/components/post/post.styl文件，在最后一行增加代码： 1@import &quot;my-post-copyright&quot; 保存重新生成即可。如果要在该博文下面增加版权信息的显示，需要在 Markdown 中增加copyright: true的设置copyright: true。 小技巧：如果你觉得每次都要输入copyright: true很麻烦的话,那么在/scaffolds/post.md文件中添加copyright项目 这样每次hexo new &quot;你的内容&quot;之后，生成的md文件会自动把copyright:加到里面去。 文章加密访问打开themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig文件,在以下位置插入这样一段代码： 1234567891011121314&lt;script&gt; (function () &#123; if ('&#123;&#123; page.password &#125;&#125;') &#123; if (prompt('请输入文章密码') !== '&#123;&#123; page.password &#125;&#125;') &#123; alert('密码错误！'); if (history.length === 1) &#123; location.replace("http://xxxxxxx.xxx"); // 这里替换成你的首页 &#125; else &#123; history.back(); &#125; &#125; &#125; &#125;)();&lt;/script&gt; 然后在文章上写成类似这样： ###]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next主题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用小工具汇总]]></title>
    <url>%2Ftools.html</url>
    <content type="text"><![CDATA[本文最后更新于2018年12月18日20:53可能会因为没有更新而失效，如已失效或需要修正，请留言！ 查询ip地址位置与运营商mediafile网盘]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客常见错误分析]]></title>
    <url>%2Ferrortype.html</url>
    <content type="text"><![CDATA[本文最后更新于2018年12月18日11:14可能会因为没有更新而失效，如已失效或需要修正，请留言！ 欢迎加入博客搭建交流群（QQ群号60429576）==&gt;点击加入&lt;== 常见错误分析以下是常见的错误类型： YAML 解析错误 12JS-YAML: incomplete explicit mapping pair; a key node is missed at line 18, column 29:last_updated: Last updated: %s 如果 YAML 字符串中包含冒号（:）的话，请加上引号。 12JS-YAML: bad indentation of a mapping entry at line 18, column 31:last_updated:&quot;Last updated: %s&quot; 请确认您使用空格进行缩进（Soft tab），并确认冒号后有加上一个空格。 您可参阅YAML 规范以取得更多信息。 EMFILE 错误1Error: EMFILE, too many open files 虽然 Node.js 有非阻塞 I/O，同步 I/O 的数量仍被系统所限制，在生成大量静态文件的时候，您可能会碰到 EMFILE 错误，您可以尝试提高同步 I/O 的限制数量来解决此问题。1$ ulimit -n 10000 （这一命令只对Linux系统有效） Git 部署问题1fatal: &apos;username.github.io&apos; does not appear to be a git repository 请确认您已经在电脑上配置 git，或改用 HTTPS 库（repository）地址。 服务器问题1Error: listen EADDRINUSE 您可能同时开启两个 Hexo 服务器，或者有其他应用程序正在占用相同的端口，请尝试修改 port 参数，或是在启动 Hexo 服务器时加上 -p 选项。1$ hexo server -p 5000 插件安装问题1npm ERR! node-waf configure build 当您尝试安装以 C/C++ 或其他非 JavaScript 语言所编写的插件时，可能会遇到此类问题，请确认您已经在电脑上安装相对应的编译器。 DTrace 错误 （Mac OS X）123&#123; [Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;&#123; [Error: Cannot find module &apos;./build/default/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;&#123; [Error: Cannot find module &apos;./build/Debug/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125; DTrace 安装可能有错误 , 使用下列命令:1$ npm install hexo --no-optional 参考 #1326 在 Jade 或 Swig 遍历资料Hexo 使用 Warehouse 存储资料，它不是一般数组所以必须先进行类型转型才能遍历。 undefined 资料没有更新有时资料可能没有被更新，或是生成的文件与修改前的相同，您可以尝试清除缓存并再执行一次。1$ hexo clean 泄露（Escape）内容Hexo 使用 Nunjucks 来解析文章（旧版本使用 Swig，两者语法类似），内容若包含 `{{ }}` 或 `{% %}` 可能导致解析错误，您可以用 raw 标签包裹来避免潜在问题发生。123&#123;% raw %&#125;Hello &#123;&#123; sensitive &#125;&#125;&#123;% endraw %&#125; ENOSPC 错误 （Linux）运行 $ hexo server 命令有时会返回这样的错误：1Error: watch ENOSPC ... 它可以用过运行 $ npm dedupe 来解决，如果不起作用的话，可以尝试在 Linux 终端中运行下列命令：1$ echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p 这将会提高你能监视的文件数量。 Process Out of Memory当hexo g时，遇到以下错误：1FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - process out of memory 如下，更改hexo-cli文件的第一行，来增大nodejs堆内存.该bug已在新版本修复。1#!/usr/bin/env node --max_old_space_size=8192 Git Deployment ProblemsRPC failed12error: RPC failed; result=22, HTTP code = 403fatal: &apos;username.github.io&apos; does not appear to be a git repository 确保你有你的电脑上设置git正确或尝试使用HTTPS存储库URL。Error: ENOENT: no such file or directory这个需要有一定的git的知识，因为可能是由于写错了标签,类别,或文件名，导致本地和github冲突了，Git不能自动合并这一变化所以它打破了自动分支。解决办法： 检查文章的标签和类别,确保本地和github上是相同的。 合并分支（Commit）。 清除，重构。在站点目录下，命令行（即Git Bash）运行hexo clean和hexo g 手动将站点目录下的public文件夹复制到您的桌面 从你的master分支切换到部署在本地分支。 从桌面复制public文件夹到本地分支。 合并分支到github（Commit）。 切回master分支。 Server Problems1Error: listen EADDRINUSE 你可能使用相同的端口，同时开启了两个Hexo服务器。如果需要同时开启，可以尝试修改端口设置：1$ hexo server -p 5000 Plugin Installation Problems1npm ERR! node-waf configure build 这个错误可能发生在试图安装一个用Cc++或另一个javascript语言编写的插件。确保您已经安装了正确的编译器在您的计算机上。 Iterate Data Model on Jade or SwigHexo使用仓库的数据模型。这不是一个数组,所以你可能需要将对象转换为iterable。 undefined No command is executed那个不能使用除help、init和version以外的命令行（即Git Bash）时, 有可能时站点目录下的package.json文件，缺少hexo ，如下:12345&#123; &quot;hexo&quot;: &#123; &quot;version&quot;: &quot;3.2.2&quot; &#125;&#125; ENOSPC Error (Linux)如果运行命令$ hexo server 返回一个错误:1Error: watch ENOSPC … 可以通过运行$ npm dedupe或者以下命令行（即Git Bash）：1$ echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p 来增加测试时，你可以看见的文件数量。 EMPERM Error (Windows Subsystem for Linux)如果在Windows Subsystem for Linux，运行命令$ hexo server 返回这个错误:1Error: watch /path/to/hexo/theme/ EMPERM 因为目前在Windows Subsystem for Linux中，有些内容更改时，还不能实时更新到hexo服务器。所以需要重新编译，再启动服务器：12hexo ghexo s Template render error有时运行命令$ hexo g 返回一个错误:12FATAL Something’s wrong. Maybe you can find the solution here: &lt;http://hexo.io/docs/troubleshooting.html&gt;Template render error: (unknown path) 这意味着有些认不出来单词在你的文件，并且很可能在你的新博文,或者配置文件_config.yml中，比如缩进错误：错误例子：1234plugins:hexo-generator-feedhexo-generator-sitemap\ `]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客部署至云服务器]]></title>
    <url>%2Fhexovps.html</url>
    <content type="text"><![CDATA[本文最后更新于2018年12月18日11:14可能会因为没有更新而失效，如已失效或需要修正，请留言！ 欢迎加入博客搭建交流群（QQ群号60429576）==&gt;点击加入&lt;== 博客的Githupages发布方案已经在本地安装Hexo博客框架及发布至Github Pages讲过了，在这里就不在赘述，本文主要讲将博客部署至个人VPS中，本次教程需要一定的Linux基础，如果不是非常有必要不建议部署在VPS上，国内的VPS主机需要进行备案才能绑定域名，国外的主机访问速度受限。 主机选择本次教程使用的主机是腾讯云的1G1核主机，如果你是学生的话推荐腾讯云或者阿里云的学生机，或者使用阿里云的香港轻量应用服务器，这个是免备案的。详情请看：【良心推荐】阿里云香港1G1核轻量应用服务器24元/月 前提条件1.一台安装了 Ubuntu 14.04 的 云服务器2.在本地电脑上安装 Node.js 和 npm，这个可以看Hexo博客本地环境安装步骤此外，还要在云服务器上安装 Git 和 Nginx 两个必备的软件包。Git 用于版本管理和部署，Nginx 用于静态博客托管。12sudo apt-get updatesudo apt-get install git nginx -y 本地 Hexo 安装及初始化NPM 上还有许多 Hexo 相关的包，但是只要安装好了 hexo-cli 和 hexo-server这两个核心组件之后，就可以让博客跑起来了。我们使用 Node.js 的包管理器 npm 安装 hexo-cli 和 hexo-server。1npm install hexo-cli hexo-server -g hexo-cli 是 Hexo 的命令行工具，可用于快速新建、发布、部署博客；hexo-server 是 Hexo 的内建服务器，可用于部署前的预览和测试。-g 选项，表示全局安装。接下来，为 Hexo 博客做一些基础配置，包括创建基础文件。这步操作很简单，Hexo 提供了一个快捷命令，只需要提供一个存放文件的目录地址即可。1hexo init ~/hexo_blog 在国内环境下执行该命令，速度会有些慢。因为需要从 Hexo 在 Github 上的仓库克隆；仓库克隆成功后，会自动执行一系列 npm 命令，自安装依赖模块。这时，我们就已经有了一个写作、管理博客的环境。详细的请看本地安装Hexo博客框架及发布至Github Pages此处不赘述。 云端服务器配置完成本地端的操作之后，暂时回到服务器的配置。在下面的操作之前，请确保已经购买了一台云服务器，并且能够以 ubuntu 用户身份正常登陆。在这部分，要完成以下件事情：1.为本地的 hexo_blog 配置一个部署静态文件的远程仓库。 许多教程均以 Github 作为中转的平台，但是会让整个流程变得更为复杂，而且会受服务器与 Github 之间网络情况的影响。假如 Github 宕机或者被封，你将无法更新博客。2.配置 Nginx 托管博客文件目录。3.配置远程仓库自动更新到博客文件目录的钩子。 创建私有 Git 仓库在 /var/repo/ 下，创建一个名为 hexo_static 的裸仓库（bare repo）。如果没有 /var/repo 目录，需要先创建；然后修改目录的所有权和用户权限，之后 ubuntu 用户都具备 /var/repo 目录下所有新生成的目录和文件的权限。123sudo mkdir /var/repo/sudo chown -R $USER:$USER /var/repo/sudo chmod -R 755 /var/repo/ 然后，执行如下命令：12cd /var/repo/git init --bare hexo_static.git 配置 Nginx 托管文件目录接下来，创建 /var/www/hexo 目录，用于 Nginx 托管。1sudo mkdir -p /var/www/hexo 和上一步类似，这里也需要修改目录的所有权和权限。12sudo chown -R $USER:$USER /var/www/hexosudo chmod -R 755 /var/www/hexo 然后，修改 Nginx 的 default 设置：1sudo vim /etc/nginx/sites-available/default 将其中的 root 指令指向 /var/www/hexo 目录。1234567...server &#123; listen 80 default_server; listen [::]:80 default_server ipv6only=on; root /var/www/hexo; # 需要修改的部分 index index.html index.htm;... 保存并退出文件。如果以后购买并备案域名之后，可以再将配置中的 default_server 修改为你的域名。最后，重启 Nginx 服务，使得改动生效。1sudo service nginx restart 做完这一步之后，你去访问服务器的 IP 时，应该还是会报错的，因为 /var/www/hexo 目录是空的。 创建 Git 钩子接下来，在服务器上的裸仓库 hexo_static 创建一个钩子，在满足特定条件时将静态 HTML 文件传送到 Web 服务器的目录下，即 /var/www/hexo。在自动生成的 hooks 目录下创建一个新的钩子文件：1vim /var/repo/hexo_static.git/hooks/post-receive 在该文件中添加两行代码，指定 Git 的工作树（源代码）和 Git 目录（配置文件等）。12#!/bin/bashgit --work-tree=/var/www/hexo --git-dir=/var/repo/hexo_static.git checkout -f 保存并退出文件，并让该文件变为可执行文件。1chmod +x /var/repo/hexo_static.git/hooks/post-receive 至此，服务端的配置基本结束。 配置密钥如果直接是通过账户密码SSH连接的云服务器，需要配置一下密钥让博客在推送是免输密码 本地生成密钥这个跟链接github时生成密钥是一样的。也可以用当时生成的那个id_rsa.pub公钥。生成 ssh-key，选加密算法（rsa、dsa），给秘钥命名（可选）：1$ ssh-keygen -t rsa -C &quot;name&quot; passphrase 是证书口令，以加强安全性，避免证书被恶意复制。会在 ~.ssh 下生成 id_rsa, id_rsa.pub 两个文件，分别是 私钥/公钥。 服务器配置公钥需保存到远程服务器 ~/.ssh/authorized_keys 里，私钥由客户端本地留存。要保证 .ssh 和 authorized_keys 都只有用户自己有写权限。否则验证无效。12$ chmod -R 700 ~/.ssh/$ chmod 600 ~/.ssh/authorized_keys 然后vi .ssh/authorized_keys把id_rsa.pub中的内容粘贴进去保存。 博客配置主题配置文件中deploy项目配置如下1234deploy: type: git repo: root@ip地址:/var/repo/hexo_static branch: master]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>vps</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[轻量应用服务器与ECS该选哪一个]]></title>
    <url>%2Fecs.html</url>
    <content type="text"><![CDATA[本文最后更新于2018年12月18日11:13可能会因为没有更新而失效，如已失效或需要修正，请留言！ 欢迎加入博客搭建交流群（QQ群号60429576）==&gt;点击加入&lt;== 优点控制台轻量应用服务器 ECS 那么从控制台的对比上，ECS 是把所有的内容都告诉用户你的地域、操作系统、标签等等，但是新手看了难免一头雾水。而 轻量应用服务器 则做了减法，让控制台变得更加的直观简介，只告诉你重要的信息。站在新手视角肯定是 轻量应用服务器 更简洁更舒服，站在我的角度么，我配置好服务器基本上很少会来看一下 ECS 的控制台，但一回来肯定是需要一些信息的，那么 ECS 能告诉我越多肯定越好。 应用镜像 应用镜像像 WordPress、phpwind 其实都是基于 LAMP 镜像运行的，而 轻量应用服务器 提供的 LAMP 细节好评就是：php 是通过 php-fpm 方式运行的，而不是 mod_php，而且 MySQL 也是 5.7 版本的不是说万年 5.1 或者 5.5，能支持更多的 PHP 程序。在创建虚拟主机绑定域名商相较于一键包配合图形化控制台的确更加好用。 功能 轻量应用服务器 在功能上肯定是更讨喜的，安装应用镜像基本上能做到开箱即用，三大金刚 Apache Httpd、PHP、MySQL 都会默认安装好，而且添加域名、设置 HTTPS 等操作都是一键式的，极大得降低了 HTTPS 入门门槛，而且 HTTPS 的配置跑分是 A 哟，为了照顾新手不会使用 HSTS 所以没开，不然跑到 A+ 肯定是妥妥的。ECS 能就只有空白的系统镜像，任何环境都是需要用户自行安装的，这在一定程度上增加了用户使用的学习成本。而 ECS 更多体现的就是专业性了，虽然复杂但是十分强大的安全组、弹性IP、均衡负载等等。 基础运维 比如说 ECS 控制台操作起来也更加的方便，点击一下就能远程连接了，操作的过程中也支持命令的右键复制和粘贴，也大大降低了用户使用终端控制的学习成本，不然还要下个 Putty 或者 Xshell 啥的也是麻烦。 然后默认只支持 密钥 登录 Linux，这个也是好评，不用密码当然更安全。同样不考虑使用 Putty 或者 Xshell 等 OpenSSH 连接工具的话，ECS控制台的远程终端控制实在是难用，不过借助 DMS 产品倒是能扩展使用的灵活性。 防火墙轻量的防火墙设置同 ECS 的安全组相比很简单直观更适合新手的使用，没有一些非常复杂的设置，新手看到 udp、tcp 真的是头都大了额，如果新手看教程的话，一般只会说 “记得一定要开启443端口才能使用HTTPS” 这样的话，但是一看到 ECS 又是 TCP 又是 UDP，而且端口还要写成 443/443 的形式，直接就是一个头两个大了。 缺点无法满足企业特性轻量应用服务器有轻量两个字，意味着其无法持续进行高负载运行（即 CPU 长时间高负载占用），如果我们要利用 轻量应用服务器 来进行持续的渲染、转码、机器学习等持续高负载操作那么就不可以了，也不支持 Nvme 这样的超高性能的 SSD，这对于读写敏感的操作就不好了。 三大金刚的版本问题Apache Httpd、PHP、MySQL 是会持续更新的，而且它们也均有爆发过大规模严重漏洞的历史，不过目前还没有看到应用镜像中的三大金刚如何升级版本号的姿势。像 WordPress 这样的程序完全可以适应高版本的 PHP，使用 PHP7.0 或者 7.1 可以拥有更高的性能还可以降低负载，但是默认只有 php5.6 可以选，既然使用 php-fpm 方式驱动其实完全可以提供多版本 PHP 的选择。 总结可以说 轻量应用服务器 是专门针对云计算入门新手或者只有轻量计算需求的用户，其对标的产品只会是 ECS 的共享型，当一到要使用 ECS 的企业型来发展性能、功能了，轻量应用服务器 的优势其实也就没有了。如果你只是轻度使用云计算产品例如搭建一个博客、官网，如果你需要一个更快启动的轻量服务器，如果你需要一个纯粹的虚拟专用机，如果你并没有阿里云内网的需求，那么 轻量应用服务器 绝对是你最好的选择。 评测我们对比的是华东1地域的安装了 CentOS 7.3 系统的 1核心1G内存的 ECS 和 轻量应用服务器 产品。看了评测就可以跟深入的了解，ECS 和 轻量应用服务器 的不同只在于概念而不在于性能。 CPU 性能根据下面的对比可以发现，轻量应用服务器 的性能和 ECS 并没有差距，大家都是新一代的 Xeon CPU，同样的虚拟化技术。只不过 轻量应用服务器 不可以持续高负载占用。轻量应用服务器：123456789101112131415System Benchmarks Index Values BASELINE RESULT INDEXDhrystone 2 using register variables 116700.0 34281977.0 2937.6Double-Precision Whetstone 55.0 2962.7 538.7Execl Throughput 43.0 4860.0 1130.2File Copy 1024 bufsize 2000 maxblocks 3960.0 1054197.7 2662.1File Copy 256 bufsize 500 maxblocks 1655.0 283098.8 1710.6File Copy 4096 bufsize 8000 maxblocks 5800.0 3165160.0 5457.2Pipe Throughput 12440.0 1734490.3 1394.3Pipe-based Context Switching 4000.0 375732.0 939.3Process Creation 126.0 18345.1 1456.0Shell Scripts (1 concurrent) 42.4 6747.0 1591.3Shell Scripts (8 concurrent) 6.0 921.5 1535.8System Call Overhead 15000.0 2939229.7 1959.5 ========System Benchmarks Index Score 1649.5 ECS：123456789101112131415System Benchmarks Index Values BASELINE RESULT INDEXDhrystone 2 using register variables 116700.0 34582858.9 2963.4Double-Precision Whetstone 55.0 2984.8 542.7Execl Throughput 43.0 5118.8 1190.4File Copy 1024 bufsize 2000 maxblocks 3960.0 1073823.9 2711.7File Copy 256 bufsize 500 maxblocks 1655.0 284701.5 1720.3File Copy 4096 bufsize 8000 maxblocks 5800.0 3213933.6 5541.3Pipe Throughput 12440.0 1722785.7 1384.9Pipe-based Context Switching 4000.0 377999.7 945.0Process Creation 126.0 18704.4 1484.5Shell Scripts (1 concurrent) 42.4 6852.6 1616.2Shell Scripts (8 concurrent) 6.0 937.2 1562.0System Call Overhead 15000.0 2979190.8 1986.1 ========System Benchmarks Index Score 1673.4 磁盘性能由下面的磁盘跑分也可以看见，轻量应用服务器 的 20G SSD 系统盘 和 ECS 的 20G SSD 云盘的性能都是一致的，都是 1800 的iops，也都是 90M 左右的读写没有差距。轻量应用服务器：123456789101112131415161718192021222324252627282930313233/dev/vda: Timing cached reads: 21070 MB in 2.00 seconds = 10549.25 MB/sec Timing buffered disk reads: 270 MB in 3.01 seconds = 89.76 MB/sec [root@izbp1auqkyqtj4iozs7athz dev]# fio --bs=4k --ioengine=libaio --iodepth=1 --direct=1 --rw=read --time_based --runtime=600 --refill_buffers --norandommap --randrepeat=0 --group_reporting --name=fio-read --size=10G --filename=/dev/vdafio-read: (g=0): rw=read, bs=4K-4K/4K-4K/4K-4K, ioengine=libaio, iodepth=1fio-2.2.8Starting 1 processJobs: 1 (f=1): [R(1)] [100.0% done] [7200KB/0KB/0KB /s] [1800/0/0 iops] [eta 00m:00s]fio-read: (groupid=0, jobs=1): err= 0: pid=24361: Sun Sep 10 15:04:27 2017 read : io=4206.7MB, bw=7179.3KB/s, iops=1794, runt=600004msec slat (usec): min=3, max=165, avg= 6.78, stdev= 2.02 clat (usec): min=2, max=84748, avg=548.56, stdev=2727.93 lat (usec): min=131, max=84755, avg=555.59, stdev=2727.93 clat percentiles (usec): | 1.00th=[ 141], 5.00th=[ 241], 10.00th=[ 302], 20.00th=[ 306], | 30.00th=[ 314], 40.00th=[ 322], 50.00th=[ 334], 60.00th=[ 350], | 70.00th=[ 362], 80.00th=[ 382], 90.00th=[ 442], 95.00th=[ 502], | 99.00th=[ 1012], 99.50th=[23936], 99.90th=[40704], 99.95th=[42752], | 99.99th=[68096] bw (KB /s): min= 4624, max= 7784, per=100.00%, avg=7182.85, stdev=181.15 lat (usec) : 4=0.01%, 250=6.25%, 500=88.69%, 750=3.79%, 1000=0.27% lat (msec) : 2=0.36%, 4=0.06%, 10=0.03%, 20=0.04%, 50=0.48% lat (msec) : 100=0.04% cpu : usr=0.50%, sys=1.81%, ctx=1076903, majf=1, minf=33 IO depths : 1=100.0%, 2=0.0%, 4=0.0%, 8=0.0%, 16=0.0%, 32=0.0%, &gt;=64=0.0% submit : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0% complete : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0% issued : total=r=1076894/w=0/d=0, short=r=0/w=0/d=0, drop=r=0/w=0/d=0 latency : target=0, window=0, percentile=100.00%, depth=1Run status group 0 (all jobs): READ: io=4206.7MB, aggrb=7179KB/s, minb=7179KB/s, maxb=7179KB/s, mint=600004msec, maxt=600004msecDisk stats (read/write): vda: ios=1078167/690, merge=0/399, ticks=598805/4230, in_queue=602927, util=98.01% ECS：12345678910111213141516171819202122232425262728293031323334/dev/vdb: Timing cached reads: 19778 MB in 2.00 seconds = 9901.01 MB/sec Timing buffered disk reads: 270 MB in 3.02 seconds = 89.54 MB/sec[root@iZbp1258gr0v9v184jdqqkZ dev]# fio --bs=4k --ioengine=libaio --iodepth=1 --direct=1 --rw=read --time_based --runtime=600 --refill_buffers --norandommap --randrepeat=0 --group_reporting --name=fio-read --size=10G --filename=/dev/vdbfio-read: (g=0): rw=read, bs=4K-4K/4K-4K/4K-4K, ioengine=libaio, iodepth=1fio-2.2.8Starting 1 processJobs: 1 (f=1): [R(1)] [100.0% done] [6940KB/0KB/0KB /s] [1735/0/0 iops] [eta 00m:00s]fio-read: (groupid=0, jobs=1): err= 0: pid=9552: Sun Sep 10 15:23:44 2017 read : io=4218.9MB, bw=7200.2KB/s, iops=1800, runt=600001msec slat (usec): min=3, max=344, avg= 6.97, stdev= 2.32 clat (usec): min=1, max=85711, avg=546.79, stdev=4741.30 lat (usec): min=145, max=85717, avg=553.99, stdev=4741.28 clat percentiles (usec): | 1.00th=[ 147], 5.00th=[ 149], 10.00th=[ 151], 20.00th=[ 153], | 30.00th=[ 155], 40.00th=[ 159], 50.00th=[ 167], 60.00th=[ 199], | 70.00th=[ 229], 80.00th=[ 241], 90.00th=[ 249], 95.00th=[ 270], | 99.00th=[ 374], 99.50th=[56576], 99.90th=[67072], 99.95th=[67072], | 99.99th=[67072] bw (KB /s): min= 6380, max= 7624, per=100.00%, avg=7202.00, stdev=111.69 lat (usec) : 2=0.01%, 50=0.01%, 250=90.56%, 500=8.76%, 750=0.06% lat (usec) : 1000=0.02% lat (msec) : 2=0.02%, 4=0.01%, 10=0.01%, 20=0.01%, 50=0.01% lat (msec) : 100=0.55% cpu : usr=0.50%, sys=1.98%, ctx=1080029, majf=0, minf=34 IO depths : 1=100.0%, 2=0.0%, 4=0.0%, 8=0.0%, 16=0.0%, 32=0.0%, &gt;=64=0.0% submit : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0% complete : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0% issued : total=r=1080027/w=0/d=0, short=r=0/w=0/d=0, drop=r=0/w=0/d=0 latency : target=0, window=0, percentile=100.00%, depth=1Run status group 0 (all jobs): READ: io=4218.9MB, aggrb=7200KB/s, minb=7200KB/s, maxb=7200KB/s, mint=600001msec, maxt=600001msecDisk stats (read/write): vdb: ios=1079640/0, merge=0/0, ticks=589523/0, in_queue=589382, util=98.27% 文章转载自https://yq.aliyun.com/articles/202688]]></content>
      <categories>
        <category>VPS</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[【良心推荐】阿里云香港1G1核轻量应用服务器24元/月]]></title>
    <url>%2Ftxamd.html</url>
    <content type="text"><![CDATA[本文最后更新于2018年12月16日16:21可能会因为没有更新而失效，如已失效或需要修正，请留言！ 阿里云轻量应用服务器阿里云学生机9.5元/月轻量应用服务器普通的ECS云服务器的区别，可以看一下轻量应用服务器与ECS该选哪一个?无意中发现了阿里云的轻量应用服务器，香港的比大陆的还便宜。仅仅24块钱一个月，虽买了一个月试试。 ping了一下，人在华北地区，ping香港这个延迟已经是很低了。香港服务器的优点这里就不赘述了，作为轻量应用服务器，用来翻 * bi~可以拥有比较快的速度，峰值30M的带宽，1T的流量也完全够用。用来折腾搭建个人网站的话，又可以省去备案的烦恼。 阿里云香港购买流程点击阿里云轻量应用服务器，点击立即购买 在下一个页面选择香港，当然还有新加坡服务器可选，这个也不错。如果需要搭建博客或者其他的什么环境，可以直接选择需要的应用镜像。不需要的话可以点击系统镜像选择需要的镜像即可。 后面一切都很简单了。付款完成，等待自动跳转到控制台即可。注意默认只开放了80、443、22端口，如果需要开放其他端口，可以自行在控制台的防火墙选项中设置。如果你不需要绑定域名。也不需要去看外面的世界。就是想要个云服务器折腾着玩。可以考虑阿里云学生机，阿里云还是比较人性化，24岁以下免认证，直接获得学生机购买资格。阿里云学生机提供两种配置，一种是普通的ECS，带宽只有1M。还有一种就是轻量应用服务器。 9.5元/月，一年不过一百多。用作平时折腾或者学习用途足够了。需要的赶紧买起来。阿里云学生机页面]]></content>
      <categories>
        <category>VPS</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客新建文章并发布]]></title>
    <url>%2Farticle.html</url>
    <content type="text"><![CDATA[本文最后更新于2018年12月18日11:13可能会因为没有更新而失效，如已失效或需要修正，请留言！ 欢迎加入博客搭建交流群（QQ群号60429576）==&gt;点击加入&lt;== 创建新文章根目录命令行输入hexo new &lt;模板&gt; &lt;文章名&gt;新建文章其中&lt;模板&gt;在scaffolds中，默认情况下有三个模板post、draft、page 参数 功能 路径 post 新建文章 /source/_posts/ draft 新建草稿 /source/_drafts/ page 新建页面（标签页，分类页等） /source/ 通常情况下使用hexo new post &lt;title&gt;即可，注意这里的title不是文章名，具体文章中显示的文章标题可以在文章文件中修改，例如：我这里新建一篇文章，title为article命令行输入hexo new post article此时在source/_posts/文件夹中多了一个article.md文件。打开可以看到如下内容： 文章内容中两条---之间的内容为文章的配置内容，可以在其中设置标签、分类等。其中的title为文章发布后文章页面显示的标题，例如我们修改一下tittle为：Hexo博客文章发布而.md文件的名字，也就是我们新建文章时输入的名字，是作为文章页面链接中显示的名字，例如，本篇文章的文件名为：article.md，文章内设置的文章标题为Hexo博客新建文章并发布，那么本篇文章的链接就是https://www.lixint.me/article.html 文章模板在新建文章中使用的post参数，就是模板的名称，在使用hexo new post &lt;文件名&gt;命令进行新建文章时，系统会自动在scaffolds文件夹中搜寻名为post的文件，根据其中的内容生成新的.md文章文件。后续随着配置项的增多，可以自行设置不同类型的模板。例如本篇文章的模板如下： 其中的title跟data会在生成文件时自动填写。利用此模板生成的文章文件，只需要进行对应项目的填写即可。例如本篇文章的配置信息如下： 给文章添加分类和模板通过对文件头部配置信息中tags 与categories项的修改可以设置文章的标签及分类。其中标签可以按格式贴现设置多个：123456title: Hexo博客新建文章并发布date: 2018-12-06 12:16:12tags: - Hexo - Markdowncategories: 搭建博客 在博文中添加图片目前有三种方法像博文中添加图片： 方法一命令行输入npm install hexo-asset-image --save安装插件在根目录/source目录下新建一个img文件夹，将需要插入的图片放到里面在文章中引用图片时图片使用格式![header](img/xxx.jpg)进行引用图片。 方法二在博客配置文件中搜索post_asset_folder项，设置为true 这样在创建文章时会自动在文章.md所在目录/source/_posts文件夹内生成一个与文章同名的文件夹。例如新建文章hexo new post example则会生成一个example.md文件与一个名为example的文件夹。把example这个博文需要展示的图片放在example文件夹目录下；文章内使用[% asset_img slug [title] %]（将方括号][替换为花括号}{）的格式进行插入图片，例如我要插入一个名为1.jpg的图片，写文章时就应该填写​ [% asset_img 1.jpg 图片1 %] 方法三前两种方法尽管在上传时很方便，但是在插入图片时并不是很方便，现在很多Markdown编辑器在插入图片是非常方便，截图直接粘贴、现有的图片文件直接拖入都可以实现插入图片，而不是使用代码进行插入。但是这样插入的图片在上传时并不会被上传，这样就导致了博客中文章图片的连接还是本地路径的格式。于是博主自己写了一个Python脚本，在文章完成后上传前，通过脚本自动将文章中的图片上传至腾讯云对象存储（腾讯云每个月都有一定的免费额度）或者SMMS图床，文章中图片链接替换。这样既不会占用Github Pages空间，又能方便地插入图片。对于脚本的使用，可以到==&gt;Hexo博文图片自动上传腾讯云、SMMS图床并替换博文内图片链接&lt;==查看]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python自带模块命令记录]]></title>
    <url>%2Fpythoncommand.html</url>
    <content type="text"><![CDATA[本文最后更新于2018年12月16日17:08可能会因为没有更新而失效，如已失效或需要修正，请留言！ 获取文件名/后缀名1234567import osfile = "Hello.py"# 获取前缀（文件名称）assert os.path.splitext(file)[0] == "Hello"# 获取后缀（文件类型）assert os.path.splitext(file)[-1] == ".py"assert os.path.splitext(file)[-1][1:] == "py" 判断文件/目录是否存在12345import osos.path.exists("1.txt")#Trueos.path.exists("dirpath")#True]]></content>
      <categories>
        <category>Python学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sublime Text3及配置Python使用环境]]></title>
    <url>%2Fsublimetext.html</url>
    <content type="text"><![CDATA[本文最后更新于2018年12月16日17:06可能会因为没有更新而失效，如已失效或需要修正，请留言！ 安装Package Control使用Ctrl+`（tab键上面）(或View &gt; Show Console menu) 打开Sublime Text控制台，将下面的Python代码粘贴到控制台里: 代码出处1import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) 如果在Perferences-&gt;package settings中看到package control这一项，则表明安装成功。 用Package Control查看已安装的插件1.按下Ctrl+Shift+P调出命令面板。2.输入install 调出 Install Package 选项并回车。等待。在列表中选中要安装的插件，或者输入插件名(比如要安装IMESupport插件，则输入IMESupport，它会实时过滤筛选结果)，根据命令面板中的过滤结果，选择要安装的插件。安装中文插件。搜索localiza，在搜索出来的列表中选择点击安装如果安装失败的话可以到汉化项目页面下载源码，重命名文件夹为ChineseLocalization，放到C:\Users\用户名\AppData\Roaming\Sublime Text 3\Packages中。 禁用 Sublime Text 3 检测新版本设置 Preferences -&gt; Settings-User添加 &quot;update_check&quot;: false 安装主题推荐 Boxy Ctrl(Mac下Cmd)+Shift+P install package -&gt; Boxy Theme install package -&gt; A File Icon 其他插件SublimeTmpl 新建文件模板Package settings - sublime tmpl - settings User设置，123456789&#123; &quot;disable_keymap_actions&quot;: false, // &quot;all&quot;; &quot;html,css&quot; &quot;date_format&quot; : &quot;%Y-%m-%d %H:%M:%S&quot;, &quot;attr&quot;: &#123; &quot;author&quot;: &quot;lixint&quot;, &quot;email&quot;: &quot;lixint8@gmail.com&quot;, &quot;link&quot;: &quot;https://github.com/lixint/&quot; &#125; &#125; Package settings - sublime tmpl - key bindings-user设置123456[ &#123; &quot;caption&quot;: &quot;Tmpl: Create python&quot;, &quot;command&quot;: &quot;sublime_tmpl&quot;, &quot;keys&quot;: [&quot;ctrl+alt+p&quot;], &quot;args&quot;: &#123;&quot;type&quot;: &quot;python&quot;&#125; &#125;, ] 这样用快捷键ctrl+alt+p可以快捷新建py文件并自动填写文件头 侧边栏字体大小修改插件PackageResourceViewer修改方法：插件安装完后Ctrl+alt+P打开搜索栏，搜索PackageResourceViewer名称，选择open resource 在跳出的搜索框搜索主题名 然后再搜索主题名下的主题文件的名称打开，出现主题配置文件，搜索修改需要的参数即可。 安装Anaconda1.相关配置均需在”Preferences”-“Package settings”-“Anaconda”中选择1.1“Settings-Default”中，手动设置python解释器的路径，然后保存。设置python_interpreter为python解释器路径 Settings-User 设置：12345678&#123; &quot;python_interpreter&quot;:&quot;E:/Program/Anaconda3/python.exe&quot;, &quot;suppress_word_completions&quot;: true, &quot;suppress_explicit_completions&quot;: true, &quot;complete_parameters&quot;: true, &quot;swallow_startup_errors&quot;: true, &quot;anaconda_linting&quot;:false&#125; 工具-编译系统选择anaconda 安装sublimeREPL实现sublime内交互式命令行（使用anaconda环境）正常安装步骤，安装完成后，首选项-浏览插件目录\SublimeREPL\config 新建文件夹，Python37(根据anaconda的python环境版本确定)，将Python文件夹中的文件全部复制到Python37文件夹。打开Main.sublime-menu文件，替换所有的Python为Python37（改个名字）除了各部分的1"syntax": "Packages/Python/Python.tmLanguage", 中的Python不替换。打开Main.sublime-menu文件，将所有“cmd”：后的路径改为anaconda的python环境路径(注意路径中的斜杠)1"cmd": ["D:/anaconda/envs/py3k/python.exe", "-i", "-u"], 打开Default.sublime-commands文件，替换所有Python为Python37快捷键添加如下代码，同理可以添加ipython运行。1234567891011121314//anaconda环境下运行sublimeREPL_pdb&#123;&quot;keys&quot;:[&quot;f6&quot;], &quot;caption&quot;: &quot;SublimeREPL: Python37 - PDB current file&quot;, &quot;command&quot;: &quot;run_existing_window_command&quot;, &quot;args&quot;: &#123;&quot;id&quot;: &quot;repl_Python37_pdb&quot;, &quot;file&quot;: &quot;config/Python37/Main.sublime-menu&quot;&#125;&#125;,//anaconda环境下运行sublimeREPL_run&#123;&quot;keys&quot;:[&quot;f5&quot;], &quot;caption&quot;: &quot;SublimeREPL: Python37 - RUN current file&quot;, &quot;command&quot;: &quot;run_existing_window_command&quot;, &quot;args&quot;: &#123;&quot;id&quot;: &quot;repl_Python37_run&quot;, &quot;file&quot;: &quot;config/Python37/Main.sublime-menu&quot;&#125;&#125;, pdb常用命令 快捷键设置1234567/*光标右侧为括号一类的字符时，回车键移动光标（回车的话用shift enter）*/ &#123;"keys": ["enter"], "command": "move", "args": &#123;"by": "characters", "forward": true&#125;, "context": [ &#123; "key": "following_text", "operator": "regex_contains", "operand": "^[)\\]\\&gt;\\'\\\"\\ %&gt;\\&#125;\\;\\,]", "match_all": true &#125;, &#123; "key": "preceding_text", "operator": "not_regex_match", "operand": "^.*\\&#123;$", "match_all": true &#125; ] &#125;,]]></content>
      <categories>
        <category>Python学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Sublime Text</tag>
        <tag>Anaconda</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博文图片自动上传腾讯云、SMMS图床并替换博文内图片链接]]></title>
    <url>%2Fmarkdownpic.html</url>
    <content type="text"><![CDATA[本文最后更新于2018年12月19日21:38可能会因为没有更新而失效，如已失效或需要修正，请留言！ 欢迎加入博客搭建交流群（QQ群号60429576）==&gt;点击加入&lt;== 起因 刚开始折腾Hexo博客的时候，各种修改各种查，发现网上许多教程已经过时了，于是乎决定把自己搭建博客的过程整理成文章。在用Typora写文章的时候发现，文章里插入的图片是个问题，尤其是在用截图的时候，习惯上都是截图直接粘贴进去。但是文章在发布的时候图片的地址还是用的本地路径，导致了图片显示有问题。 网上查了一下，大都是几种解决方法：插入后修改为相对路径，把图片放到source文件夹里；安装插件，渲染文章的时候自动替换图片链接。这两种都需要把图片放到Github Pages空间里，长此以往占用的内存会越来越大；还有就是使用在线的Markdown编辑器，可以实时把图片上传，这种还不错，但没试过截图插入行不行；再者就是提前把图片上传到图床，插入时就用图床的链接。感觉这几种解决方法都不是很完美，于是用我粗糙的Python技能写了一个脚本，用来在发布文章之前自动把文章中的图片上传到腾讯云存储对象或者SMMS图床，并且把返回来的链接替换掉原来的链接。 关于脚本项目Github链接工作流程很简单，在运行脚本后脚本会用正则表达式匹配!开头)的链接（所以用Html语法插入的图片不管用），然后提取出里面的本地图片地址，根据运行脚本时候的选择上传到腾讯云存储对象或者SMMS图床。然后根据反馈回来的图片链接再进行替换。 使用方法下载uploadparser.py`、`imgupload`、`UploadImg.ini放置在本地博客根目录。如果使用腾讯云cos的话先填好secret_id、secret_key、region、Bucket 腾讯云cos配置需要的各种key的获取方式参看==&gt;腾讯云对象存储官方文档博客根目录命令行格式python imgupload tx/smms/clearline &lt;filename.md&gt;例如：python imgupload tx example.md 上传至腾讯云。 相关依赖脚本使用Python 3编写第三方依赖：12requestscos-python-sdk-v5 使用腾讯云上传需要，github地址https://github.com/tencentyun/cos-python-sdk-v5 注意事项1.命令： smms、tx、clearline2.文件名需输入后缀.md，非Markdown语法暂不支持。3.上传腾讯对象存储需要自己填写secret_id、secret_key、region、Bucket，上传腾讯云对象存储默认建立一个以文件名命名的文件夹存放图片。 存在问题1.错误处理不明朗，出错时只能慢慢查。2.遇到文章中带js脚本代码的，容易误处理。其他的非图片链接的!开头)结尾的字符串都会误处理。（现已修正） 使用示例]]></content>
      <categories>
        <category>Python学习</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Markdown</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客主题安装及Next主题个性化修改]]></title>
    <url>%2Fhexo-theme-diy.html</url>
    <content type="text"><![CDATA[本文最后更新于2018年12月16日17:03可能会因为没有更新而失效，如已失效或需要修正，请留言！ 欢迎加入博客搭建交流群（QQ群号60429576）==&gt;点击加入&lt;== 写在最前面：1.在修改时请注意博客配置文件与主题配置文件的区别：博客配置文件是指博客根目录下的_config.yml文件，主题配置文件是指/themes/主题名/路径下的_config.yml文件，例如我使用的主题为next主题，主题配置文件为/themes/next/_config.yml。2.文内所有命令行命令全部是在博客根目录打开命令行下输入的。根目录下目录结构为：12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 默认情况下，命令行输入命令ls显示如下： 目录 设置作者头像 设置作者昵称与站点描述 设置代码高亮主题 侧边栏社交链接 开启打赏功能 修改打赏字体不闪动 开启友情链接or侧边栏推荐阅读 设置RSS 设置网站图标 实现全站及文章字数统计及阅读时长 添加顶部加载条 自定义鼠标样式 实现点击出现桃心 修改网页底部的小图标 去掉页面底部的强力驱动信息及设置备案信息 添加动态背景 增加波浪背景动画 在右上角实现fork me on github按钮 增加回到顶部按钮及显示当前浏览进度 修改顶部菜单与下方信息栏的间隙大小 网站标题栏背景颜色 为博客加上萌萌的 添加DaoVoice实现在线联系 主页文章添加阴影效果 增加本地搜索功能 修改语言 修改菜单及创建分类页 修改主题风格 主题选择可以到Nexo官方主题页选择自己喜欢的主题，每个主题的使用方法略有不同，所以如果你是跟我一样的小白，建议使用流行热门的主题，这样出现问题网上基本都可以搜到解决方法。推荐Next主题，我的博客使用的就是Next的主题 Next主题修改 主题安装Next主题文档页面目前Next主题的项目分成了两个项目，一个是5.1.4版本以下的，一个是一直更新的，现在已经更新到了6.5，建议直接用最新的，最新版本的主题已经把很多常用的功能集成了，用起来很方便。本篇文章是基于Next 6.5进行的修改与展示。Next主题项目页面(v5.1.4)v6.5版本页面方法1：项目页面点击releases，找到最新版本的主题zip包并下载，解压放到博客根目录/themes重命名文件夹为next，两版本通用。 方法2：博客根目录打开命令行，用5.1版本输入命令1git clone https://github.com/iissnan/hexo-theme-next themes/next 6.5版本输入命令：1git clone https://github.com/theme-next/hexo-theme-next themes/next 安装完成后，打开博客配置文件修改最上方的theme项为next。 主题配置文件是根目录/themes/next目录下的_config.yml文件。修改完成后命令行输入hexo s本地运行一下看是否生效。 主题修改 修改语言修改博客配置文件下的language项为zh-CN 这里要注意一下，看一下主题文件夹内的languange文件夹中中文的配置文件叫什么名字，Next主题有些版本的叫zh-Hans那这里就填zh-Hans，Next最新版本中用的是zh-CN，故这里填写zh-CN 修改菜单及创建分类页修改主题配置文件下的menu项，按需要打开菜单。例如我需要把标签页面打开，就把tags项前面的#去掉就行了。 Hexo s运行一下可以看到菜单多了一个标签项。但是此时还不行，只是有了入口。点击标签菜单，会显示： 因为只有了入口，但还没有标签页面，需要在命令行输入如下命令：hexo new page tags新建出标签页。 同样的道理，开启分类页的时候要输入hexo new page categories来新建出分类页。 修改主题风格Next自带四种主题风格，可以在主题配置文件搜索Scheme项，将需要的风格前的#去掉，注意只能开启一个风格。 设置作者头像编辑主题配置文件，搜索修改字段 avatar， 值设置成头像的链接地址。可以设置成在线的图片地址。也可以把图片放在本地。方法1：在线图片设置：现在有一张网络图片， 使用百度上随便搜的。 方法2：本地设置：放置在source/images目录下，设置为url: /images/avatar.jpg 这个rounded项可以设置头像为圆形，设置为ture后会自动根据头像的尺寸将头像变化为圆形或者椭圆，头像图片为正方形的话则为圆形。长方形的话长宽相差越大，椭圆越明显。设置opacity的值控制头像的透明度，值为0 - 1。rotated项为头像旋转，设置为true，则鼠标指到头像时头像会旋转。 设置作者昵称与站点描述这个比较简单。设置博客配置文件中的author为昵称，description为描述。同理，subtitle为副标题，keywords为关键词，timezone为时区，可以按需求填写。 设置代码高亮主题NexT 使用 Tomorrow Theme作为代码高亮，共有5款主题供你选择。 NexT 默认使用的是 白色的 normal 主题，可选的值有 normal，night， night blue， night bright， night eighties更改 主题配置文件中的highlight_theme 字段，将其值设定成你所喜爱的高亮主题即可。 侧边栏社交链接侧栏社交链接的修改包含两个部分， 配置在 主题配置文件 中。social字段为连接，格式为显示文本: 链接地址 || Font Awesome图标名称例如： 图标名称 是 Font Awesome 图标的名字（不必带 fa- 前缀）。enable 选项用于控制是否显示图标，你可以设置成 false 来去掉图标。例如: 百度: https://baidu.com || firefoxFont Awesome图标可以到Font Awesome查看 开启打赏功能主题自带支付宝跟微信及比特币打赏功能，只需要主题配置文件 中填入 微信和 支付宝 收款二维码图片地址即可开启该功能。搜索reward字段，将wechatpay及alipay字段前面的#去掉即可。在source文件夹中放置支付宝跟微信收款码并修改文件名字即可。reward_comment自带为打赏按钮上方的文字，不需要的话可以在前面加#注释掉。 修改打赏字体不闪动鼠标一指就疯狂抖动。 修改文件next/source/css/_common/components/post/post-reward.styl，然后注释其中的函数#QR &gt; div:hover p函数即可。css文件注释用/ 和 / 包裹代码即可。 这个post-reward.styl文件是跟按钮及图片相关的，如果需要修改关于打赏的其他属性，例如按钮大小，样式，图片大小等，都可以修改post-reward.styl文件实现。我也不太懂。在这就不展开讲了。有兴趣的可以网上搜css的语法自己尝试改。 开启友情链接 or 侧边栏推荐阅读主题配置文件 中搜索links_title字段，修改links_icon、links_title、links_layout、links四个字段的内容实现自定义风格。link_icon是title前面的图标，用法跟之前的社交链接的图标用法是一样的， 用Font Awesome图标。links_title为标题，如果是作为友情链接使用，可以设置为links_title: 友情链接在links字段设置友情链接名字及链接123links: 友链1: http://example.com/ 友链2: http://example.com/ 例如：123links: 谷歌: https://google.com/ 百度: http://baidu.com/ links_layout为各个友情链接的布局，默认是block，也可以用#注释掉这一行用下一行的inline布局。 这个模块的自由度比较高，可以用来放置友情链接，也可以放置推荐阅读。 设置 RSSNexT 中 RSS 有三个设置选项，满足特定的使用场景。 更改主题配置文件，设定 rss 字段的值：false：禁用 RSS，不在页面上显示 RSS 连接。留空：默认就是留空的，使用 Hexo 生成的 Feed 链接。 你可以需要先安装 hexo-generator-feed 插件。安装方法：根目录下命令行输入npm install hexo-generator-feed --save 具体的链接地址：适用于已经烧制过Feed的情形。建议直接使用插件，比较省事。 设置网站图标在EasyIcon中分别找一张（16 16与32 32）的ico图标,或者去别的网站下载或者制作，并将图标名称改为favicon16.ico与favicon32.ico，然后把图标放在/themes/next/source/images或者放在根目录的/source/images文件夹里。在主题配置文件内搜索favicon字段，把 small、medium字段的地址修改为/images/favicon16.ico 与 /images/favicon32.ico 实现全站及文章字数统计及阅读时长根目录命令运行1npm install hexo-symbols-count-time --save 博客配置文件底部添加如下内容，保存。12345symbols_count_time: symbols: true time: true total_symbols: true total_time: true 重新hexo s看一下，文章页面已经有字数跟阅读时长的统计了。网站底部也显示了网站总字数跟总阅读时长。 添加顶部加载条 最新版本的Next主题是内置了加载条功能的。根目录打开命令行，输入如下命令：1git clone https://github.com/theme-next/theme-next-pace themes/next/source/lib/pace 然后主题配置文件搜索pace字段，修改pace: false为pace: true即可开启加载条功能，修改下方的pace-theme字段还可以修改加载条的样式。 自定义鼠标样式打开themes/next/source/css/_custom/custom.styl,在里面写下如下代码1234567// 鼠标样式 * &#123; cursor: url("http://om8u46rmb.bkt.clouddn.com/sword2.ico"),auto!important &#125; :active &#123; cursor: url("http://om8u46rmb.bkt.clouddn.com/sword1.ico"),auto!important &#125; 在EasyIcon中找一张16 * 16的ico图，放在/source/images/中，修改上述代码中的链接为/images/xxx.ico，如果不放在本地的话，可以把图片放在图床，直接替换链接即可。第一行的链接是默认状态下的鼠标样式，第二行的是鼠标按下时的样式。 实现点击出现桃心 以及 爆炸效果 1.在/themes/next/source/js/src下新建文件love.js并填入如下代码：1!function(e,t,a)&#123;function n()&#123;c(".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText="left:"+d[e].x+"px;top:"+d[e].y+"px;opacity:"+d[e].alpha+";transform:scale("+d[e].scale+","+d[e].scale+") rotate(45deg);background:"+d[e].color+";z-index:99999");requestAnimationFrame(r)&#125;function o()&#123;var t="function"==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement("div");a.className="heart",d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement("style");a.type="text/css";try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName("head")[0].appendChild(a)&#125;function s()&#123;return"rgb("+~~(255*Math.random())+","+~~(255*Math.random())+","+~~(255*Math.random())+")"&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document); 建一个叫fireworks.js的文件并写入如下代码：1&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;; 然后打开themes/next/layout/_layout.swig,在&lt;/body&gt;上面写下如下代码：12345678&#123;% if theme.fireworks &amp;&amp; not theme.love %&#125; &lt;canvas class=&quot;fireworks&quot; style=&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;/canvas&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/fireworks.js&quot;&gt;&lt;/script&gt;&#123;% endif %&#125;&#123;% if theme.love &amp;&amp; not theme.fireworks %&#125; &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt;&#123;% endif %&#125; 最后在主题配置文件最下方加入如下代码：123# Fireworks and lovefireworks: truelove: false fireworks是爆炸效果，love是心形效果。两个不能同时开。 修改网页底部的小图标 主题配置文件搜索footer字段，修改下方的icon字段下的name字段。name字段后的名字是 Font Awesome 图标的名字（不必带 fa- 前缀）。 animated自动为闪动开关，设置为true后图标会闪动。以及可以设置图标颜色，color处填入16进制颜色代码即可。注意保留原来的双引号。 去掉页面底部的强力驱动信息及设置备案信息主题配置文件搜索copyright字段，修改powered下的enable字段的true为false即可去掉强力驱动部分的内容。 同样的theme下的enable设置为false的话可以去掉页面底部的主题信息。 enable设置为true，version设置为false的话，则不显示版本号。 如果博客有备案的话，下方beian字段设置为true，icp后填写备案号。 添加动态背景 根目录打开命令行，输入：1git clone https://github.com/theme-next/theme-next-canvas-nest themes/next/source/lib/canvas-nest 主题配置文件搜索canvas-nest字段，enable项设置为true。 其他配置项说明： color ：线条颜色, 默认: &#39;0,0,0&#39;；三个数字分别为(R,G,B) opacity: 线条透明度（0~1）, 默认: 0.5 count: 线条的总数量, 默认: 150 zIndex: 背景的z-index属性，css属性用于控制所在层的位置, 默认: -1 onmobile：是否在手机端显示。 增加波浪背景动画 根目录打开命令行，输入1git clone https://github.com/theme-next/theme-next-three themes/next/source/lib/three 主题配置文件搜索three_waves字段，设置为true three_waves、canvas_lines、canvas_sphere三个的效果各不相同，可以自己尝试一下选一个喜欢的。 在右上角实现fork me on github按钮最新的Next主题已经内置了增加右上角的Fork me on github按钮功能，只需要在主题配置文件搜索github_banner字段，去掉前面的#，把||前面的github链接替换成自己的即可。 ||后的参数为按钮的title，为鼠标指在按钮上时显示的文本。 增加回到顶部按钮及显示当前浏览进度主题配置文件搜索b2t字段，将b2t字段的false修改为true即可，（注意此功能只能用于Pisces和Gemini主题）。 将下方的scrollpercent字段设置为true即可实现当前浏览进度的显示。 修改顶部菜单与下方信息栏的间隙大小 主题配置文件搜索offset字段，将offset的像素数大小设置为需要的值，默认为12。 网站标题栏背景颜色打开 themes/next/source/css/_custom/custom.styl ,在里面写下如下代码：1234// 网站标题栏背景颜色.site-meta &#123; background: #FF0033; //修改为自己喜欢的颜色&#125; 颜色的值可以自行网上搜索16进制颜色进行修改。 为博客加上萌萌的 首先安装插件，根目录命令行输入npm install --save hexo-helper-live2d主题配置文件最下方添加如下代码：123456789101112131415161718192021# Live2D## https://github.com/xiazeyu/live2d-widget.js## https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-initlive2d: model: scale: 1 hHeadPos: 0.5 vHeadPos: 0.618 display: superSample: 2 width: 150 height: 300 position: right hOffset: 0 vOffset: -20 mobile: show: true scale: 0.5 react: opacityDefault: 0.7 opacityOnHover: 0.2 更多设置可以查看官方文档 添加DaoVoice 实现在线联系 本功能可以实现在线留言，作者会收到邮件，如果绑定了微信，作者还会收到微信通知。首先到DaoVoice注册一个Daovioce账号。注册完成后会进到DaoCloud，重新访问连接即可。进到Daovoice面板，点击左侧边栏的应用设置-- 安装到网站。在下方的代码中会看到app_id: &quot;xxxx&quot;字样。 打开 themes/next/layout/_partials/head/head.swig 文件中最下方加入如下代码：123456789&#123;% if theme.daovoice %&#125; &lt;script&gt; (function(i,s,o,g,r,a,m)&#123;i["DaoVoiceObject"]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset="utf-8";m.parentNode.insertBefore(a,m)&#125;)(window,document,"script",('https:' == document.location.protocol ? 'https:' : 'http:') + "//widget.daovoice.io/widget/0f81ff2f.js","daovoice") daovoice('init', &#123; app_id: "&#123;&#123;theme.daovoice_app_id&#125;&#125;" &#125;); daovoice('update'); &lt;/script&gt;&#123;% endif %&#125; 在主题配置文件 _config.yml，添加如下代码：123# DaoVoice daovoice: truedaovoice_app_id: 这里输入前面获取的app_id 回到Daovoice控制面板，点击聊天设置可以对聊天图标的颜色及位置进行设置。 最后到右上角选择管理员，微信绑定，可以绑定你的微信号。这样收到消息后可以通过小程序进行回复。 主页文章添加阴影效果打开\themes\next\source\css\_custom\custom.styl,加入如下代码：12345678// 主页文章添加阴影效果 .post &#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); &#125; 可以自行修改代码来修改阴影效果。 增加本地搜索功能首先安装插件，根目录命令行输入1npm install hexo-generator-searchdb --save 编辑博客配置文件，新增以下内容到任意位置：12345search: path: search.xml field: post format: html limit: 10000 主题配置文件搜索local_search字段，设置enable为true123# Local searchlocal_search: enable: true 配置完成后保存，hexo g、hexo s查看。 未完待续]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next主题</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[本地安装Hexo博客框架及发布至Github Pages]]></title>
    <url>%2Fhexo-githubpages.html</url>
    <content type="text"><![CDATA[本文最后更新于2018年12月16日16:58可能会因为没有更新而失效，如已失效或需要修正，请留言！ 欢迎加入博客搭建交流群（QQ群号60429576）==&gt;点击加入&lt;== 前面的文章中我们进行了1. Github注册以及Github Pages创建2. Hexo博客本地环境安装下一步，我们就要进行本地Hexo博客框架的搭建，完成一个能够在本地访问的博客页面。 Hexo简介Hexo是一个快速, 简洁且高效的博客框架. 让上百个页面在几秒内瞬间完成渲染. Hexo支持Github Flavored Markdown的所有功能, 甚至可以整合Octopress的大多数插件. 并自己也拥有强大的插件系统。 Hexo安装本步骤需要Git与Node.js的支持，如果没有安装的话请参照Hexo博客本地环境安装进行安装。 初始化电脑中任选盘符新建一个文件夹作为博客网站的根目录，文件名好不要是中文。空白处右键点击Git Bash here在出现的命令行窗口中输入npm install -g hexo-cli，等待运行完成依次输入以下命令123hexo init &lt;新建文件夹的名称&gt;cd &lt;新建文件夹的名称&gt;npm install 等待运行完成，此时文件夹中多了许多文件。注意：后续的命令均需要在站点目录下（即文件夹内）使用Git Bash运行。此时Hexo框架的本地搭建已经完成了。我们来运行一下看看：命令行依次输入以下命令12hexo ghexo s 浏览器中打开http://locakhost:4000或者127.0.0.1:4000可以看到一个网页，说明Hexo博客已经成功在本地运行。 本地博客发布到Github Pages第一步，需要在Github上创建好Github Pages仓库。Github注册以及Github Pages创建第二步，安装发布插件。在站点目录中运行命令行输入npm install hexo-deployer-git --save后续博客的修改等等各种功能 都需要安装各种插件。这个对博客的帮助是非常大的。等待插件安装完成。第三步，将本地目录与Github关联起来。命令行输入ssh-keygen -t rsa -C &quot;邮箱地址&quot;，这里要输入之前注册Github时的邮箱，例如我之前注册用的是 example@163.com，那命令行就输入ssh-keygen -t rsa -C &quot;example@163.com&quot;输入后一直回车。打开C:\Users\用户名，文件夹内寻找.ssh文件夹文件夹内会有两个文件，一个id_rsa.pub一个id_rsa，用文本方式打开id_rsa.pub，推荐使用Notepad++，复制里面的的内容。打开Github 点击右上角的头像 Settings 选择SSH and GPG keys点击New SSH key 将之前复制的内容粘帖到Key的框中。 上面的title 可以随意 点击add 完成添加。此时回到命令行。 试一下是否跟Github连接成功。命令行输入ssh -T git@github.com ，弹出的内容输入yes，看到出现Hi &lt;account name&gt;! You&#39;ve successfully authenticated, but GitHub doesnot provide shell access. 说明链接成功。此处这个&lt;account name&gt;应该是你Github的用户名。第四步 修改Hexo站点的配置文件。进入博客文件夹，找到_config.yml文件。 这个是博客配置文件，后面的修改会多次用到它。用Notepad++打开。修改一下title跟url等，url修改为https://&lt;用户名&gt;.github.io，例如我的用户名是example的话，就应该输入https://example.github.io拉到文件最底部，在deploy下面添加一个repo项 一个branch项。填入如下代码：123type: gitrepo: git@github.com:&lt;Github用户名&gt;/&lt;github用户名&gt;.github.io.gitbranch: master 图中也是以用户名为example为例。填写完成后保存即可。第五步 生成页面上传至Github命令行输入hexo g，此时Hexo会根据配置文件渲染出一套静态页面。完成后输入hexo d，此时会将之前渲染出的一系列文件上传至Github。Tips： 也可以直接输入hexo g -d直接完成渲染和上传。上传完成后，打开https://&lt;用户名&gt;.github.io查看上传的网页。如果页面变成了之前本地调试时的样子，说明上传以及完成了。没变的话查看一下上传时命令行窗口的信息有没有错误信息，没有的话清除一下浏览器缓存试试。]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Github Pages</tag>
        <tag>Github</tag>
        <tag>Git</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客本地环境安装步骤]]></title>
    <url>%2Fhexo-git.html</url>
    <content type="text"><![CDATA[本文最后更新于2018年12月16日16:57可能会因为没有更新而失效，如已失效或需要修正，请留言！ 欢迎加入博客搭建交流群（QQ群号60429576）==&gt;点击加入&lt;== 本篇文章主要进行了Hexo博客搭建本地环境的配置及将博客发布至Github Pages。成功将Hexo博客在本地及GIthub Pages运行。 本地环境安装安装Node.js打开Node.js下载页选择Windows安装包，根据系统选择32位或者64位进行下载。 下载完成后打开进行安装。步骤1：勾选I accept，Next 步骤2：设置安装路径，默认即可 步骤3：选择需要安装的包，默认即可 步骤4：默认即可 步骤5：Next 步骤6：点击Finish完成安装。 步骤7：检查一下Node.js版本开始 - 运行 - 输入cmd ，输入node --version，可以看到Node.js的版本。 安装GitGit安装跟Node.js一样简单，打开Git下载页，点击右侧的下载按钮。 下载完成后，打开安装，这个步骤比较多，一路Next即可，无需过多配置。 点击Finish完成安装。此时在桌面空白处点击右键，你就会发现右键菜单多了两个命令 Git GUI here和Git bash here 至此，Node.js和Git全部安装完成。后面我们要进行Hexo博客框架的安装以及将博客发布到Github Pages。]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【持续更新】Github Pages + Hexo 博客搭建，Next主题个性化修改]]></title>
    <url>%2Fhexo-blog.html</url>
    <content type="text"><![CDATA[本文最后更新于2018年12月16日17:07可能会因为没有更新而失效，如已失效或需要修正，请留言！ 欢迎加入博客搭建交流群（QQ群号60429576）==&gt;点击加入&lt;== 1.Github注册以及Github Pages2.Hexo博客本地环境安装步骤3.本地安装Hexo博客框架及发布至Github Pages4.Hexo博客主题安装及Next主题个性化修改5.新建文章并发布6.Hexo博客常见错误分析7.Hexo博客部署至云服务器后续内容正在整理中。]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next主题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github注册以及Github Pages创建]]></title>
    <url>%2Fgithubpage.html</url>
    <content type="text"><![CDATA[本文最后更新于2018年12月16日16:53可能会因为没有更新而失效，如已失效或需要修正，请留言！ 欢迎加入博客搭建交流群（QQ群号60429576）==&gt;点击加入&lt;== 准备工作注册Github，建立Gihub Pages仓库打开Github首页，点击右上角的Sign up或者直接在2处填写信息后点击Sign up for Github进行注册。 Verify account处点击两侧的箭头让图上的动物变成正的，验证完成后点击下方的Creat an account进到下一步。 选择Free方案，下方的两个选项可选可不选，点击Continue继续 然后选择Skip this step完成Github的注册。此时Github会给你注册时填写的邮箱发送一封验证邮件，完成邮箱验证后才可以创建仓库。 完成验证后，依次点击1，2处，在新页面点击NEW按钮。或者直接点击3处进行仓库创建。 填入必要的信息，这里的仓库名必须要填&lt;用户名&gt;.github.io例如，图示我注册的账户名为creataccount2，仓库名就需要填写creataccount2.github.io。填写必要的描述，也可不填。勾选Initialize this repository with a README点击Creat repository进行创建。 依次点击1，2新建一个文件。 文件名为index.html，内容随意。点击Commit new file进行创建。打开&lt;用户名&gt;.github.io 一个简单的网页，内容就是刚才我们输入的内容。至此，Github Pages已经创建完成了。后续我们将利用Hexo博客框架对Github Pages的内容进行进一步的丰富。]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Github Pages</tag>
        <tag>Github</tag>
      </tags>
  </entry>
</search>
