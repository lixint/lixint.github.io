<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo博文图片自动上传腾讯云、SMMS图床并替换博文内图片链接]]></title>
    <url>%2Fmarkdownpic.html</url>
    <content type="text"><![CDATA[欢迎加入博客搭建交流群（QQ群号60429576）==&gt;点击加入&lt;== 起因 刚开始折腾Hexo博客的时候，各种修改各种查，发现网上许多教程已经过时了，于是乎决定把自己搭建博客的过程整理成文章。在用Typora写文章的时候发现，文章里插入的图片是个问题，尤其是在用截图的时候，习惯上都是截图直接粘贴进去。但是文章在发布的时候图片的地址还是用的本地路径，导致了图片显示有问题。 网上查了一下，大都是几种解决方法：插入后修改为相对路径，把图片放到source文件夹里；安装插件，渲染文章的时候自动替换图片链接。这两种都需要把图片放到Github Pages空间里，长此以往占用的内存会越来越大；还有就是使用在线的Markdown编辑器，可以实时把图片上传，这种还不错，但没试过截图插入行不行；再者就是提前把图片上传到图床，插入时就用图床的链接。感觉这几种解决方法都不是很完美，于是用我粗糙的Python技能写了一个脚本，用来在发布文章之前自动把文章中的图片上传到腾讯云存储对象或者SMMS图床，并且把返回来的链接替换掉原来的链接。 关于脚本项目Github链接工作流程很简单，在运行脚本后脚本会用正则表达式匹配!开头)的链接（所以用Html语法插入的图片不管用），然后提取出里面的本地图片地址，根据运行脚本时候的选择上传到腾讯云存储对象或者SMMS图床。然后根据反馈回来的图片链接再进行替换。 使用方法下载uploadpic.py放置在本地博客根目录。博客根目录命令行格式python uploadpic.py &lt;上传方法&gt; &lt;文章名&gt; 相关依赖脚本使用Python 3.4编写第三方依赖：12requestscos-python-sdk-v5 使用腾讯云上传需要，github地址https://github.com/tencentyun/cos-python-sdk-v5 注意事项1.命令： smms、tx2.文件名需输入后缀.md，非Markdown语法暂不支持。3.上传腾讯对象存储需要自己填写secret_id、secret_key、region、Bucket，上传后会自动根据上传日期建立一个YY-MM-DD格式的文件夹存储图片。 存在问题1.错误处理不明朗，出错时只能慢慢查。2.遇到文章中带js脚本代码的，容易误处理。其他的非图片链接的!开头)结尾的字符串都会误处理。 使用示例]]></content>
      <categories>
        <category>Python学习</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Python</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客主题安装及Next主题个性化修改]]></title>
    <url>%2Fhexo-theme-diy.html</url>
    <content type="text"><![CDATA[欢迎加入博客搭建交流群（QQ群号60429576）==&gt;点击加入&lt;== 写在最前面：1.在修改时请注意博客配置文件与主题配置文件的区别：博客配置文件是指博客根目录下的_config.yml文件，主题配置文件是指/themes/主题名/路径下的_config.yml文件，例如我使用的主题为next主题，主题配置文件为/themes/next/_config.yml。2.文内所有命令行命令全部是在博客根目录打开命令行下输入的。根目录下目录结构为： 12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 默认情况下，命令行输入命令ls显示如下： 目录 设置作者头像 设置作者昵称与站点描述 设置代码高亮主题 侧边栏社交链接 开启打赏功能 修改打赏字体不闪动 开启友情链接or侧边栏推荐阅读 设置RSS 设置网站图标 实现全站及文章字数统计及阅读时长 添加顶部加载条 自定义鼠标样式 实现点击出现桃心 修改网页底部的小图标 去掉页面底部的强力驱动信息及设置备案信息 添加动态背景 增加波浪背景动画 在右上角实现fork me on github按钮 增加回到顶部按钮及显示当前浏览进度 修改顶部菜单与下方信息栏的间隙大小 网站标题栏背景颜色 为博客加上萌萌的 添加DaoVoice实现在线联系 主页文章添加阴影效果 增加本地搜索功能 修改语言 修改菜单及创建分类页 修改主题风格 主题选择可以到Nexo官方主题页选择自己喜欢的主题，每个主题的使用方法略有不同，所以如果你是跟我一样的小白，建议使用流行热门的主题，这样出现问题网上基本都可以搜到解决方法。推荐Next主题，我的博客使用的就是Next的主题 Next主题修改 主题安装Next主题文档页面目前Next主题的项目分成了两个项目，一个是5.1.4版本以下的，一个是一直更新的，现在已经更新到了6.5，建议直接用最新的，最新版本的主题已经把很多常用的功能集成了，用起来很方便。本篇文章是基于Next 6.5进行的修改与展示。Next主题项目页面(v5.1.4)v6.5版本页面方法1：项目页面点击releases，找到最新版本的主题zip包并下载，解压放到博客根目录/themes重命名文件夹为next，两版本通用。方法2：博客根目录打开命令行，用5.1版本输入命令 1git clone https://github.com/iissnan/hexo-theme-next themes/next 6.5版本输入命令：1git clone https://github.com/theme-next/hexo-theme-next themes/next 安装完成后，打开博客配置文件修改最上方的theme项为next。主题配置文件是根目录/themes/next目录下的_config.yml文件。修改完成后命令行输入hexo s本地运行一下看是否生效。 主题修改 修改语言修改博客配置文件下的language项为zh-CN这里要注意一下，看一下主题文件夹内的languange文件夹中中文的配置文件叫什么名字，Next主题有些版本的叫zh-Hans那这里就填zh-Hans，Next最新版本中用的是zh-CN，故这里填写zh-CN 修改菜单及创建分类页修改主题配置文件下的menu项，按需要打开菜单。例如我需要把标签页面打开，就把tags项前面的#去掉就行了。Hexo s运行一下可以看到菜单多了一个标签项。但是此时还不行，只是有了入口。点击标签菜单，会显示：因为只有了入口，但还没有标签页面，需要在命令行输入如下命令：hexo new page tags新建出标签页。同样的道理，开启分类页的时候要输入hexo new page categories来新建出分类页。 修改主题风格Next自带四种主题风格，可以在主题配置文件搜索Scheme项，将需要的风格前的#去掉，注意只能开启一个风格。 设置作者头像编辑主题配置文件，搜索修改字段 avatar， 值设置成头像的链接地址。可以设置成在线的图片地址。也可以把图片放在本地。方法1：在线图片设置：现在有一张网络图片， 使用百度上随便搜的。方法2：本地设置：放置在source/images目录下，设置为url: /images/avatar.jpg这个rounded项可以设置头像为圆形，设置为ture后会自动根据头像的尺寸将头像变化为圆形或者椭圆，头像图片为正方形的话则为圆形。长方形的话长宽相差越大，椭圆越明显。设置opacity的值控制头像的透明度，值为0 - 1。rotated项为头像旋转，设置为true，则鼠标指到头像时头像会旋转。 设置作者昵称与站点描述这个比较简单。设置博客配置文件中的author为昵称，description为描述。同理，subtitle为副标题，keywords为关键词，timezone为时区，可以按需求填写。 设置代码高亮主题NexT 使用 Tomorrow Theme作为代码高亮，共有5款主题供你选择。 NexT 默认使用的是 白色的 normal 主题，可选的值有 normal，night， night blue， night bright， night eighties更改 主题配置文件中的highlight_theme 字段，将其值设定成你所喜爱的高亮主题即可。 侧边栏社交链接侧栏社交链接的修改包含两个部分， 配置在 主题配置文件 中。social字段为连接，格式为显示文本: 链接地址 || Font Awesome图标名称例如：图标名称 是 Font Awesome 图标的名字（不必带 fa- 前缀）。enable 选项用于控制是否显示图标，你可以设置成 false 来去掉图标。例如: 百度: https://baidu.com || firefoxFont Awesome图标可以到Font Awesome查看 开启打赏功能主题自带支付宝跟微信及比特币打赏功能，只需要主题配置文件 中填入 微信和 支付宝 收款二维码图片地址即可开启该功能。搜索reward字段，将wechatpay及alipay字段前面的#去掉即可。在source文件夹中放置支付宝跟微信收款码并修改文件名字即可。reward_comment自带为打赏按钮上方的文字，不需要的话可以在前面加#注释掉。 修改打赏字体不闪动鼠标一指就疯狂抖动。修改文件next/source/css/_common/components/post/post-reward.styl，然后注释其中的函数#QR &gt; div:hover p函数即可。css文件注释用/ 和 / 包裹代码即可。这个post-reward.styl文件是跟按钮及图片相关的，如果需要修改关于打赏的其他属性，例如按钮大小，样式，图片大小等，都可以修改post-reward.styl文件实现。我也不太懂。在这就不展开讲了。有兴趣的可以网上搜css的语法自己尝试改。 开启友情链接 or 侧边栏推荐阅读主题配置文件 中搜索links_title字段，修改links_icon、links_title、links_layout、links四个字段的内容实现自定义风格。link_icon是title前面的图标，用法跟之前的社交链接的图标用法是一样的， 用Font Awesome图标。links_title为标题，如果是作为友情链接使用，可以设置为links_title: 友情链接在links字段设置友情链接名字及链接123links: 友联1: http://example.com/ 友联2: http://example.com/ 例如： 123links: 谷歌: https://google.com/ 百度: http://baidu.com/ links_layout为各个友情链接的布局，默认是block，也可以用#注释掉这一行用下一行的inline布局。这个模块的自由度比较高，可以用来放置友情链接，也可以放置推荐阅读。 设置 RSSNexT 中 RSS 有三个设置选项，满足特定的使用场景。 更改主题配置文件，设定 rss 字段的值： false：禁用 RSS，不在页面上显示 RSS 连接。 留空：默认就是留空的，使用 Hexo 生成的 Feed 链接。 你可以需要先安装 hexo-generator-feed 插件。 安装方法：根目录下命令行输入npm install hexo-generator-feed --save 具体的链接地址：适用于已经烧制过Feed的情形。建议直接使用插件，比较省事。 设置网站图标在EasyIcon中分别找一张（16 16与32 32）的ico图标,或者去别的网站下载或者制作，并将图标名称改为favicon16.ico与favicon32.ico，然后把图标放在/themes/next/source/images或者放在根目录的/source/images文件夹里。在主题配置文件内搜索facicon字段，把 small、medium字段的地址修改为/images/favicon16.ico 与 /images/favicon32.ico 实现全站及文章字数统计及阅读时长根目录命令运行1npm install hexo-symbols-count-time --save 博客配置文件底部添加如下内容，保存。 12345symbols_count_time: symbols: true time: true total_symbols: true total_time: true 重新hexo s看一下，文章页面已经有字数跟阅读时长的统计了。网站底部也显示了网站总字数跟总阅读时长。 添加顶部加载条最新版本的Next主题是内置了加载条功能的。根目录打开命令行，输入如下命令：1git clone https://github.com/theme-next/theme-next-pace themes/next/source/lib/pace 然后主题配置文件搜索pace字段，修改pace: false为pace: true即可开启加载条功能，修改下方的pace-theme字段还可以修改加载条的样式。 自定义鼠标样式打开themes/next/source/css/_custom/custom.styl,在里面写下如下代码1234567// 鼠标样式 * &#123; cursor: url("http://om8u46rmb.bkt.clouddn.com/sword2.ico"),auto!important &#125; :active &#123; cursor: url("http://om8u46rmb.bkt.clouddn.com/sword1.ico"),auto!important &#125; 在EasyIcon中找一张16 * 16的ico图，放在/source/images/中，修改上述代码中的链接为/images/xxx.ico，如果不放在本地的话，可以把图片放在图床，直接替换链接即可。第一行的链接是默认状态下的鼠标样式，第二行的是鼠标按下时的样式。 实现点击出现桃心 以及 爆炸效果1.在/themes/next/source/js/src下新建文件love.js并填入如下代码：1!function(e,t,a)&#123;function n()&#123;c(".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText="left:"+d[e].x+"px;top:"+d[e].y+"px;opacity:"+d[e].alpha+";transform:scale("+d[e].scale+","+d[e].scale+") rotate(45deg);background:"+d[e].color+";z-index:99999");requestAnimationFrame(r)&#125;function o()&#123;var t="function"==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement("div");a.className="heart",d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement("style");a.type="text/css";try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName("head")[0].appendChild(a)&#125;function s()&#123;return"rgb("+~~(255*Math.random())+","+~~(255*Math.random())+","+~~(255*Math.random())+")"&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document); 建一个叫fireworks.js的文件并写入如下代码：1&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;; 然后打开themes/next/layout/_layout.swig,在&lt;/body&gt;上面写下如下代码：123456789&#123;% if theme.fireworks &amp;&amp; not theme.love %&#125; &lt;canvas class=&quot;fireworks&quot; style=&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;/canvas&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/fireworks.js&quot;&gt;&lt;/script&gt;&#123;% endif %&#125;&#123;% if theme.love &amp;&amp; not theme.fireworks %&#125; &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt;&#123;% endif %&#125; 最后在主题配置文件最下方加入如下代码：123# Fireworks and lovefireworks: truelove: false fireworks是爆炸效果，love是心形效果。两个不能同时开。 修改网页底部的小图标主题配置文件搜索footer字段，修改下方的icon字段下的name字段。name字段后的名字是 Font Awesome 图标的名字（不必带 fa- 前缀）。animated自动为闪动开关，设置为true后图标会闪动。以及可以设置图标颜色，color处填入16进制颜色代码即可。注意保留原来的双引号。 去掉页面底部的强力驱动信息及设置备案信息主题配置文件搜索copyright字段，修改powered下的enable字段的true为false即可去掉强力驱动部分的内容。同样的theme下的enable设置为false的话可以去掉页面底部的主题信息。enable设置为true，version设置为false的话，则不显示版本号。如果博客有备案的话，下方beian字段设置为true，icp后填写备案号。 添加动态背景根目录打开命令行，输入：1git clone https://github.com/theme-next/theme-next-canvas-nest themes/next/source/lib/canvas-nest 主题配置文件搜索canvas-nest字段，enable项设置为true。其他配置项说明： color ：线条颜色, 默认: &#39;0,0,0&#39;；三个数字分别为(R,G,B) opacity: 线条透明度（0~1）, 默认: 0.5 count: 线条的总数量, 默认: 150 zIndex: 背景的z-index属性，css属性用于控制所在层的位置, 默认: -1 onmobile：是否在手机端显示。增加波浪背景动画根目录打开命令行，输入1git clone https://github.com/theme-next/theme-next-three themes/next/source/lib/three 主题配置文件搜索three_waves字段，设置为truethree_waves、canvas_lines、canvas_sphere三个的效果各不相同，可以自己尝试一下选一个喜欢的。 在右上角实现fork me on github按钮最新的Next主题已经内置了增加右上角的Fork me on github按钮功能，只需要在主题配置文件搜索github_banner字段，去掉前面的#，把||前面的github链接替换成自己的即可。||后的参数为按钮的title，为鼠标指在按钮上时显示的文本。 增加回到顶部按钮及显示当前浏览进度主题配置文件搜索b2t字段，将b2t字段的false修改为true即可，（注意此功能只能用于Pisces和Gemini主题）。将下方的scrollpercent字段设置为true即可实现当前浏览进度的显示。 修改顶部菜单与下方信息栏的间隙大小主题配置文件搜索offset字段，将offset的像素数大小设置为需要的值，默认为12。 网站标题栏背景颜色打开 themes/next/source/css/_custom/custom.styl ,在里面写下如下代码：1234// 网站标题栏背景颜色.site-meta &#123; background: #FF0033; //修改为自己喜欢的颜色&#125; 颜色的值可以自行网上搜索16进制颜色进行修改。 为博客加上萌萌的首先安装插件，根目录命令行输入npm install --save hexo-helper-live2d主题配置文件最下方添加如下代码：123456789101112131415161718192021# Live2D## https://github.com/xiazeyu/live2d-widget.js## https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-initlive2d: model: scale: 1 hHeadPos: 0.5 vHeadPos: 0.618 display: superSample: 2 width: 150 height: 300 position: right hOffset: 0 vOffset: -20 mobile: show: true scale: 0.5 react: opacityDefault: 0.7 opacityOnHover: 0.2 更多设置可以查看官方文档 添加DaoVoice 实现在线联系本功能可以实现在线留言，作者会收到邮件，如果绑定了微信，作者还会收到微信通知。首先到DaoVoice注册一个Daovioce账号。注册完成后会进到DaoCloud，重新访问连接即可。进到Daovoice面板，点击左侧边栏的应用设置-- 安装到网站。在下方的代码中会看到app_id: &quot;xxxx&quot;字样。打开 themes/next/layout/_partials/head/head.swig 文件中最下方加入如下代码：123456789&#123;% if theme.daovoice %&#125; &lt;script&gt; (function(i,s,o,g,r,a,m)&#123;i["DaoVoiceObject"]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset="utf-8";m.parentNode.insertBefore(a,m)&#125;)(window,document,"script",('https:' == document.location.protocol ? 'https:' : 'http:') + "//widget.daovoice.io/widget/0f81ff2f.js","daovoice") daovoice('init', &#123; app_id: "&#123;&#123;theme.daovoice_app_id&#125;&#125;" &#125;); daovoice('update'); &lt;/script&gt;&#123;% endif %&#125; 在主题配置文件 _config.yml，添加如下代码：123# DaoVoice daovoice: truedaovoice_app_id: 这里输入前面获取的app_id 回到Daovoice控制面板，点击聊天设置可以对聊天图标的颜色及位置进行设置。最后到右上角选择管理员，微信绑定，可以绑定你的微信号。这样收到消息后可以通过小程序进行回复。 主页文章添加阴影效果打开\themes\next\source\css\_custom\custom.styl,加入如下代码：12345678// 主页文章添加阴影效果 .post &#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); &#125; 可以自行修改代码来修改阴影效果。 增加本地搜索功能首先安装插件，根目录命令行输入1npm install hexo-generator-searchdb --save 编辑博客配置文件，新增以下内容到任意位置：12345search: path: search.xml field: post format: html limit: 10000 主题配置文件搜索local_search字段，设置enable为true123# Local searchlocal_search: enable: true 配置完成后保存，hexo g、hexo s查看。 未完待续]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>博客搭建</tag>
        <tag>Next主题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[本地安装Hexo博客框架及发布至Github Pages]]></title>
    <url>%2Fhexo-githubpages.html</url>
    <content type="text"><![CDATA[欢迎加入博客搭建交流群（QQ群号60429576）==&gt;点击加入&lt;== 前面的文章中我们进行了1. Github注册以及Github Pages创建2. Hexo博客本地环境安装下一步，我们就要进行本地Hexo博客框架的搭建，完成一个能够在本地访问的博客页面。 Hexo简介Hexo是一个快速, 简洁且高效的博客框架. 让上百个页面在几秒内瞬间完成渲染. Hexo支持Github Flavored Markdown的所有功能, 甚至可以整合Octopress的大多数插件. 并自己也拥有强大的插件系统。 Hexo安装本步骤需要Git与Node.js的支持，如果没有安装的话请参照Hexo博客本地环境安装进行安装。 初始化电脑中任选盘符新建一个文件夹作为博客网站的根目录，文件名好不要是中文。空白处右键点击Git Bash here在出现的命令行窗口中输入npm install -g hexo-cli，等待运行完成依次输入以下命令123hexo init &lt;新建文件夹的名称&gt;cd &lt;新建文件夹的名称&gt;npm install 等待运行完成，此时文件夹中多了许多文件。注意：后续的命令均需要在站点目录下（即文件夹内）使用Git Bash运行。此时Hexo框架的本地搭建已经完成了。我们来运行一下看看：命令行依次输入以下命令12hexo ghexo s 浏览器中打开http://locakhost:4000或者127.0.0.1:4000可以看到一个网页，说明Hexo博客已经成功在本地运行。 本地博客发布到Github Pages第一步，需要在Github上创建好Github Pages仓库。Github注册以及Github Pages创建第二步，安装发布插件。在站点目录中运行命令行输入npm install hexo-deployer-git --save后续博客的修改等等各种功能 都需要安装各种插件。这个对博客的帮助是非常大的。等待插件安装完成。第三步，将本地目录与Github关联起来。命令行输入ssh-keygen -t rsa -C &quot;邮箱地址&quot;，这里要输入之前注册Github时的邮箱，例如我之前注册用的是 example@163.com，那命令行就输入ssh-keygen -t rsa -C &quot;example@163.com&quot;输入后一直回车。打开C:\Users\用户名，文件夹内寻找.ssh文件夹文件夹内会有两个文件，一个id_rsa.pub一个id_rsa，用文本方式打开id_rsa.pub，推荐使用Notepad++，复制里面的的内容。打开Github 点击右上角的头像 Settings 选择SSH and GPG keys点击New SSH key 将之前复制的内容粘帖到Key的框中。 上面的title 可以随意 点击add 完成添加。此时回到命令行。 试一下是否跟Github连接成功。命令行输入ssh -T git@github.com ，弹出的内容输入yes，看到出现Hi &lt;account name&gt;! You&#39;ve successfully authenticated, but GitHub doesnot provide shell access. 说明链接成功。此处这个&lt;account name&gt;应该是你Github的用户名。第四步 修改Hexo站点的配置文件。进入博客文件夹，找到_config.yml文件。 这个是博客配置文件，后面的修改会多次用到它。用Notepad++打开。修改一下title跟url等，url修改为https://&lt;用户名&gt;.github.io，例如我的用户名是example的话，就应该输入https://example.github.io拉到文件最底部，在deploy下面添加一个repo项 一个branch项。填入如下代码：123type: gitrepo: git@github.com:&lt;Github用户名&gt;/&lt;github用户名&gt;.github.io.gitbranch: master 图中也是以用户名为example为例。填写完成后保存即可。第五步 生成页面上传至Github命令行输入hexo g，此时Hexo会根据配置文件渲染出一套静态页面。完成后输入hexo d，此时会将之前渲染出的一系列文件上传至Github。Tips： 也可以直接输入hexo g -d直接完成渲染和上传。上传完成后，打开https://&lt;用户名&gt;.github.io查看上传的网页。如果页面变成了之前本地调试时的样子，说明上传以及完成了。没变的话查看一下上传时命令行窗口的信息有没有错误信息，没有的话清除一下浏览器缓存试试。]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Github Pages</tag>
        <tag>Github</tag>
        <tag>Git</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客本地环境安装步骤]]></title>
    <url>%2Fhexo-git.html</url>
    <content type="text"><![CDATA[欢迎加入博客搭建交流群（QQ群号60429576）==&gt;点击加入&lt;== 本篇文章主要进行了Hexo博客搭建本地环境的配置及将博客发布至Github Pages。成功将Hexo博客在本地及GIthub Pages运行。 本地环境安装安装Node.js打开Node.js下载页选择Windows安装包，根据系统选择32位或者64位进行下载。下载完成后打开进行安装。步骤1：勾选I accept，Next步骤2：设置安装路径，默认即可步骤3：选择需要安装的包，默认即可步骤4：默认即可步骤5：Next步骤6：点击Finish完成安装。步骤7：检查一下Node.js版本开始 - 运行 - 输入cmd ，输入node --version，可以看到Node.js的版本。 安装GitGit安装跟Node.js一样简单，打开Git下载页，点击右侧的下载按钮。下载完成后，打开安装，这个步骤比较多，一路Next即可，无需过多配置。点击Finish完成安装。此时在桌面空白处点击右键，你就会发现右键菜单多了两个命令 Git GUI here和Git bash here至此，Node.js和Git全部安装完成。后面我们要进行Hexo博客框架的安装以及将博客发布到Github Pages。]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Hexo</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【持续更新】Github Pages + Hexo 博客搭建，Next主题个性化修改]]></title>
    <url>%2Fhexo-blog.html</url>
    <content type="text"><![CDATA[欢迎加入博客搭建交流群（QQ群号60429576）==&gt;点击加入&lt;== Github注册以及Github PagesHexo博客本地环境安装步骤本地安装Hexo博客框架及发布至Github PagesHexo博客主题安装及Next主题个性化修改 后续内容正在整理中。]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NEXT主题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github注册以及Github Pages创建]]></title>
    <url>%2Fgithubpage.html</url>
    <content type="text"><![CDATA[欢迎加入博客搭建交流群（QQ群号60429576）==&gt;点击加入&lt;== 准备工作注册Github，建立Gihub Pages仓库打开Github首页，点击右上角的Sign up或者直接在2处填写信息后点击Sign up for Github进行注册。 Verify account处点击两侧的箭头让图上的动物变成正的，验证完成后点击下方的Creat an account进到下一步。 选择Free方案，下方的两个选项可选可不选，点击Continue继续 然后选择Skip this step完成Github的注册。此时Github会给你注册时填写的邮箱发送一封验证邮件，完成邮箱验证后才可以创建仓库。 完成验证后，依次点击1，2处，在新页面点击NEW按钮。或者直接点击3处进行仓库创建。 填入必要的信息，这里的仓库名必须要填&lt;用户名&gt;.github.io例如，图示我注册的账户名为creataccount2，仓库名就需要填写creataccount2.github.io。填写必要的描述，也可不填。勾选Initialize this repository with a README点击Creat repository进行创建。 依次点击1，2新建一个文件。 文件名为index.html，内容随意。点击Commit new file进行创建。 打开&lt;用户名&gt;.github.io 一个简单的网页，内容就是刚才我们输入的内容。 至此，Github Pages已经创建完成了。后续我们将利用Hexo博客框架对Github Pages的内容进行进一步的丰富。]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Github Pages</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sublime Text3及配置Python使用环境]]></title>
    <url>%2Fsublimetext.html</url>
    <content type="text"><![CDATA[安装Package Control使用(或View > Show Console menu) 打开Sublime Text控制台，将下面的Python代码粘贴到控制台里: [代码出处](https://packagecontrol.io/installation#st3)12```pythonimport urllib.request,os,hashlib; h = &apos;6f4c264a24d933ce70df5dedcf1dcaee&apos; + &apos;ebe013ee18cced0ef93d5f746d80ef60&apos;; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &apos;http://packagecontrol.io/&apos; + pf.replace(&apos; &apos;, &apos;%20&apos;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&apos;Error validating download (got %s instead of %s), please try manual install&apos; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &apos;wb&apos; ).write(by) 如果在Perferences-&gt;package settings中看到package control这一项，则表明安装成功。 用Package Control查看已安装的插件1.按下Ctrl+Shift+P调出命令面板。2.输入install 调出 Install Package 选项并回车。等待。在列表中选中要安装的插件，或者输入插件名(比如要安装IMESupport插件，则输入IMESupport，它会实时过滤筛选结果)，根据命令面板中的过滤结果，选择要安装的插件。 安装中文插件。搜索localiza，在搜索出来的列表中选择点击安装 如果安装失败的话可以到https://github.com/rexdf/ChineseLocalization下载源码，重命名文件夹为*ChineseLocalization*，放到`C:\Users\Root\AppData\Roaming\Sublime Text 3\Packages`中。 禁用 Sublime Text 3 检测新版本设置 Preferences -&gt; Settings-User 添加 &quot;update_check&quot;: false 安装主题推荐 Boxy Ctrl(Mac下Cmd)+Shift+P install package -&gt; Boxy Theme install package -&gt; A File Icon 其他插件#### SublimeTmpl 新建文件模板 Package settings - sublime tmpl - settings User设置， 123456789&#123; &quot;disable_keymap_actions&quot;: false, // &quot;all&quot;; &quot;html,css&quot; &quot;date_format&quot; : &quot;%Y-%m-%d %H:%M:%S&quot;, &quot;attr&quot;: &#123; &quot;author&quot;: &quot;lixint&quot;, &quot;email&quot;: &quot;lixint8@gmail.com&quot;, &quot;link&quot;: &quot;https://github.com/lixint/&quot; &#125; &#125; Package settings - sublime tmpl - key bindings-user设置 123456[ &#123; &quot;caption&quot;: &quot;Tmpl: Create python&quot;, &quot;command&quot;: &quot;sublime_tmpl&quot;, &quot;keys&quot;: [&quot;ctrl+alt+p&quot;], &quot;args&quot;: &#123;&quot;type&quot;: &quot;python&quot;&#125; &#125;, ] 这样用快捷键ctrl+alt+p可以快捷新建py文件并自动填写文件头 侧边栏字体大小修改插件PackageResourceViewer修改方法： 插件安装完后Ctrl+alt+P打开搜索栏，搜索PackageResourceViewer名称，选择open resource 在跳出的搜索框搜索主题名 然后再搜索主题名下的主题文件的名称 打开，出现主题配置文件，搜索修改需要的参数即可。 安装Anaconda1.相关配置均需在”Preferences”-“Package settings”-“Anaconda”中选择 1.1“Settings-Default”中，手动设置python解释器的路径，然后保存。 设置python_interpreter为python解释器路径 Settings-User 设置： 12345678&#123; &quot;python_interpreter&quot;:&quot;E:/Program/Anaconda3/python.exe&quot;, &quot;suppress_word_completions&quot;: true, &quot;suppress_explicit_completions&quot;: true, &quot;complete_parameters&quot;: true, &quot;swallow_startup_errors&quot;: true, &quot;anaconda_linting&quot;:false&#125; 工具-编译系统选择anaconda 安装sublimeREPL实现sublime内交互式命令行（使用anaconda环境）正常安装步骤，安装完成后，首选项-浏览插件目录\SublimeREPL\config 新建文件夹，Python37(根据anaconda的python环境版本确定)，将Python文件夹中的文件全部复制到Python37文件夹。 打开Main.sublime-menu文件，替换所有的Python为Python37（改个名字）除了各部分的 1"syntax": "Packages/Python/Python.tmLanguage", 中的Python不替换。 打开Main.sublime-menu文件，将所有“cmd”：后的路径改为anaconda的python环境路径(注意路径中的斜杠) 1"cmd": ["D:/anaconda/envs/py3k/python.exe", "-i", "-u"], 打开Default.sublime-commands文件，替换所有Python为Python37 快捷键添加如下代码，同理可以添加ipython运行。 1234567891011121314//anaconda环境下运行sublimeREPL_pdb&#123;&quot;keys&quot;:[&quot;f6&quot;], &quot;caption&quot;: &quot;SublimeREPL: Python37 - PDB current file&quot;, &quot;command&quot;: &quot;run_existing_window_command&quot;, &quot;args&quot;: &#123;&quot;id&quot;: &quot;repl_Python37_pdb&quot;, &quot;file&quot;: &quot;config/Python37/Main.sublime-menu&quot;&#125;&#125;,//anaconda环境下运行sublimeREPL_run&#123;&quot;keys&quot;:[&quot;f5&quot;], &quot;caption&quot;: &quot;SublimeREPL: Python37 - RUN current file&quot;, &quot;command&quot;: &quot;run_existing_window_command&quot;, &quot;args&quot;: &#123;&quot;id&quot;: &quot;repl_Python37_run&quot;, &quot;file&quot;: &quot;config/Python37/Main.sublime-menu&quot;&#125;&#125;, pdb常用命令| 命令 | 解释 || ——————- | ————————– || break 或 b 设置断点 | 设置断点 || continue 或 c | 继续执行程序 || list 或 l | 查看当前行的代码段 || step 或 s | 进入函数 || return 或 r | 执行代码直到从当前函数返回 || exit 或 q | 中止并退出 || next 或 n | 执行下一行 || pp | 打印变量的值 || help | 帮助 | 快捷键设置1234567/*光标右侧为括号一类的字符时，回车键移动光标（回车的话用shift enter）*/ &#123;"keys": ["enter"], "command": "move", "args": &#123;"by": "characters", "forward": true&#125;, "context": [ &#123; "key": "following_text", "operator": "regex_contains", "operand": "^[)\\]\\&gt;\\'\\\"\\ %&gt;\\&#125;\\;\\,]", "match_all": true &#125;, &#123; "key": "preceding_text", "operator": "not_regex_match", "operand": "^.*\\&#123;$", "match_all": true &#125; ] &#125;,]]></content>
      <categories>
        <category>Python学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Sublime Text</tag>
        <tag>Anaconda</tag>
      </tags>
  </entry>
</search>
